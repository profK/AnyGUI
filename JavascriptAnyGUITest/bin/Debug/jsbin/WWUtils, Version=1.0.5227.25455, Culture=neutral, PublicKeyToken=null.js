/* Generated by JSIL v0.7.9 build 22029. See http://jsil.org/ for more information. */ 
var $asm0A = JSIL.DeclareAssembly("WWUtils, Version=1.0.5227.25455, Culture=neutral, PublicKeyToken=null");

JSIL.DeclareNamespace("WWUtils");
JSIL.DeclareNamespace("WWUtils.LowRentParser");
/* class WWUtils.LowRentParser.Tokenizer */ 

(function Tokenizer$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm0B.System.IO.TextReader)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm0B.System.Text.StringBuilder)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm0B.System.String)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm0A.WWUtils.LowRentParser.Tokenizer_TOKENTYPE)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm0B.System.Char)) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm0B.System.Object)) ();
  };
  var $S00 = function () {
    return ($S00 = JSIL.Memoize(new JSIL.ConstructorSignature($asm0B.TypeRef("System.Text.StringBuilder"), null))) ();
  };
  var $S01 = function () {
    return ($S01 = JSIL.Memoize(new JSIL.MethodSignature($asm0B.TypeRef("System.Text.StringBuilder"), [$asm0B.TypeRef("System.Int32")]))) ();
  };

  function Tokenizer__ctor (reader) {
    this.token = $S00().Construct();
    this.rdr = reader;
  };

  function Tokenizer_NextToken (/* ref */ tokenString) {
    (this.token).Clear();
    var state = $T03().EOF;

    while (((this.rdr).Peek() | 0) !== -1) {
      var nextChar = String.fromCharCode((this.rdr).Peek());
      switch (state.valueOf()) {
        case 0: 
        case 5: 
          if ($T04().IsLetter(nextChar)) {
            state = $T03().STRING;
            $S01().CallVirtual("Append", null, this.token, (this.rdr).Read());
          } else if ($T04().IsDigit(nextChar)) {
            state = $T03().INTEGER;
            $S01().CallVirtual("Append", null, this.token, (this.rdr).Read());
          } else if ($T04().IsSymbol(nextChar)) {
            tokenString.set((String.fromCharCode((this.rdr).Read())).toString());
            var result = $T03().SYMBOL;
            return result;
          }
          break;

        case 1: 
          if ($T04().IsLetterOrDigit(nextChar)) {
            $S01().CallVirtual("Append", null, this.token, (this.rdr).Read());
            tokenString.set((this.token).toString());
            result = $T03().STRING;
            return result;
          }
          break;

        case 2: 
          if ((nextChar.charCodeAt(0) | 0) === ((".").charCodeAt(0) | 0)) {
            state = $T03().FLOAT;
            $S01().CallVirtual("Append", null, this.token, (this.rdr).Read());
          } else {
            if (!$T04().IsDigit(nextChar)) {
              tokenString.set((this.token).toString());
              result = $T03().INTEGER;
              return result;
            }
            $S01().CallVirtual("Append", null, this.token, (this.rdr).Read());
          }
          break;

        case 3: 
          if (!$T04().IsDigit(nextChar)) {
            tokenString.set((this.token).toString());
            result = $T03().FLOAT;
            return result;
          }
          $S01().CallVirtual("Append", null, this.token, (this.rdr).Read());
          break;

      }
    }
    tokenString.set((this.token).toString());
    result = $T03().EOF;
    return result;
  };

  JSIL.MakeType({
      BaseType: $asm0B.TypeRef("System.Object"), 
      Name: "WWUtils.LowRentParser.Tokenizer", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm0B.TypeRef("System.IO.TextReader")), 
      Tokenizer__ctor
    );

    $.Method({Static:false, Public:true }, "NextToken", 
      new JSIL.MethodSignature($asm0A.TypeRef("WWUtils.LowRentParser.Tokenizer+TOKENTYPE"), [$jsilcore.TypeRef("JSIL.Reference", [$.String])]), 
      Tokenizer_NextToken
    );

    $.Field({Static:false, Public:false}, "rdr", $asm0B.TypeRef("System.IO.TextReader")); 
    $.Field({Static:false, Public:false}, "token", $asm0B.TypeRef("System.Text.StringBuilder")); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* enum WWUtils.LowRentParser.Tokenizer+TOKENTYPE */ 

JSIL.MakeEnum(
  "WWUtils.LowRentParser.Tokenizer+TOKENTYPE", false, {
    WHITESPACE: 0, 
    STRING: 1, 
    INTEGER: 2, 
    FLOAT: 3, 
    SYMBOL: 4, 
    EOF: 5
  }, false
);

/* class WWUtils.LowRentParser.Parser */ 

(function Parser$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm0B.System.IO.TextReader)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm0A.WWUtils.LowRentParser.Tokenizer)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize(System.Array.Of($asm0B.System.String))) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm0B.System.String)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm0B.System.Int32)) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm0A.WWUtils.LowRentParser.Tokenizer_TOKENTYPE)) ();
  };
  var $T06 = function () {
    return ($T06 = JSIL.Memoize($asm0A.WWUtils.LowRentParser.ParsingException)) ();
  };
  var $T07 = function () {
    return ($T07 = JSIL.Memoize($asm0B.System.Object)) ();
  };
  var $T08 = function () {
    return ($T08 = JSIL.Memoize($asm0B.System.Single)) ();
  };
  var $S00 = function () {
    return ($S00 = JSIL.Memoize(new JSIL.ConstructorSignature($asm0A.TypeRef("WWUtils.LowRentParser.ParsingException"), [$asm0B.TypeRef("System.String")]))) ();
  };

  function Parser__ctor (rdr) {
    this.tok = new ($T01())(rdr);
  };

  function Parser_Expect (matches) {
    var s = new JSIL.BoxedVariable(null);
    (this.tok).NextToken(/* ref */ s);

    for (var i = 0; i < (matches.length | 0); i = ((i + 1) | 0)) {
      if (s.get() == matches[i]) {
        var result = i;
        return result;
      }
    }
    result = -1;
    return result;
  };

  function Parser_ExpectFloat () {
    var s = new JSIL.BoxedVariable(null);
    var ttype = (this.tok).NextToken(/* ref */ s);
    if (ttype !== $T05().FLOAT) {
      throw $S00().Construct(JSIL.ConcatString("Expected float, found ", (ttype).toString()));
    }
    return $T08().Parse(s.get());
  };

  function Parser_ExpectInt () {
    var s = new JSIL.BoxedVariable(null);
    var ttype = (this.tok).NextToken(/* ref */ s);
    if (ttype !== $T05().INTEGER) {
      throw $S00().Construct(JSIL.ConcatString("Expected integer, found ", (ttype).toString()));
    }
    return $T04().Parse(s.get());
  };

  function Parser_ExpectString () {
    var s = new JSIL.BoxedVariable(null);
    var ttype = (this.tok).NextToken(/* ref */ s);
    if (ttype !== $T05().STRING) {
      throw $S00().Construct(JSIL.ConcatString("Expected string, found ", (ttype).toString()));
    }
    return s.get();
  };

  function Parser_ExpectSymbol () {
    var s = new JSIL.BoxedVariable(null);
    var ttype = (this.tok).NextToken(/* ref */ s);
    if (ttype !== $T05().SYMBOL) {
      throw $S00().Construct(JSIL.ConcatString("Expected symbol, found ", (ttype).toString()));
    }
    return s.get();
  };

  JSIL.MakeType({
      BaseType: $asm0B.TypeRef("System.Object"), 
      Name: "WWUtils.LowRentParser.Parser", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm0B.TypeRef("System.IO.TextReader")), 
      Parser__ctor
    );

    $.Method({Static:false, Public:true }, "Expect", 
      new JSIL.MethodSignature($.Int32, [$jsilcore.TypeRef("System.Array", [$.String])]), 
      Parser_Expect
    )
      .Parameter(0, "matches", function (_) {
          _.Attribute($asm0B.TypeRef("System.ParamArrayAttribute"))
        });

    $.Method({Static:false, Public:true }, "ExpectFloat", 
      JSIL.MethodSignature.Return($.Single), 
      Parser_ExpectFloat
    );

    $.Method({Static:false, Public:true }, "ExpectInt", 
      JSIL.MethodSignature.Return($.Int32), 
      Parser_ExpectInt
    );

    $.Method({Static:false, Public:true }, "ExpectString", 
      JSIL.MethodSignature.Return($.String), 
      Parser_ExpectString
    );

    $.Method({Static:false, Public:true }, "ExpectSymbol", 
      JSIL.MethodSignature.Return($.String), 
      Parser_ExpectSymbol
    );

    $.Field({Static:false, Public:false}, "tok", $asm0A.TypeRef("WWUtils.LowRentParser.Tokenizer")); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class WWUtils.LowRentParser.ParsingException */ 

(function ParsingException$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm0A.WWUtils.LowRentParser.LowRentXMLParser)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm0B.System.String)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm0B.System.Object)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize(System.Array.Of($asm0B.System.Object))) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm0B.System.Exception)) ();
  };

  function ParsingException__ctor$00 (parser, msg) {
    $thisType.prototype._ctor.call(this, JSIL.ConcatString.apply(null, JSIL.Array.New($T02(), ["Parsing Exception at line ", parser.get_CurrentLineNumber(), " character ", parser.get_CurrentCharacterNumber(), ":", msg])));
  };

  function ParsingException__ctor$01 (msg) {
    $T04().prototype._ctor.call(this, msg);
  };

  JSIL.MakeType({
      BaseType: $asm0B.TypeRef("System.Exception"), 
      Name: "WWUtils.LowRentParser.ParsingException", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm0A.TypeRef("WWUtils.LowRentParser.LowRentXMLParser"), $.String]), 
      ParsingException__ctor$00
    );

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.String), 
      ParsingException__ctor$01
    );

    $.ImplementInterfaces(
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

JSIL.DeclareNamespace("WWUtils.Math");
/* struct WWUtils.Math.Vector2`1 */ 

(function Vector2$b1$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm0B.System.Object)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm0B.System.Boolean)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm0B.System.Single)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm0B.System.Math)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm0B.System.Double)) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm0B.System.String)) ();
  };
  var $T06 = function () {
    return ($T06 = JSIL.Memoize(System.Array.Of($asm0B.System.Object))) ();
  };

  function Vector2$b1__ctor (x, y) {
    JSIL.CopyMembers(new ($thisType.Of($thisType.T.get(this))) (), this);
    (this.Vector2$b1$X$value = x);
    (this.Vector2$b1$Y$value = y);
  };

  function Vector2$b1_Dot (rhs) {
    var arg_159_2 = this.Vector2$b1$X$value * rhs.Vector2$b1$X$value;
    return $thisType.T.get(this).$Cast(arg_159_2 + (this.Vector2$b1$Y$value * rhs.Vector2$b1$Y$value));
  };

  function Vector2$b1_get_X () {
    return this.Vector2$b1$X$value;
  };

  function Vector2$b1_get_Y () {
    return this.Vector2$b1$Y$value;
  };

  function Vector2$b1_op_Addition (lhs, rhs) {
    var arg_153_0 = $thisType.T.get(this).$Cast(lhs.Vector2$b1$X$value + rhs.Vector2$b1$X$value);
    return new ($thisType.Of($thisType.T.get(this))) (JSIL.CloneParameter($thisType.T.get(this), arg_153_0), JSIL.CloneParameter($thisType.T.get(this), $thisType.T.get(this).$Cast(lhs.Vector2$b1$Y$value + rhs.Vector2$b1$Y$value)));
  };

  function Vector2$b1_op_Division (lhs, scaler) {
    var arg_149_0 = $thisType.T.get(this).$Cast(lhs.Vector2$b1$X$value / scaler);
    return new ($thisType.Of($thisType.T.get(this))) (JSIL.CloneParameter($thisType.T.get(this), arg_149_0), JSIL.CloneParameter($thisType.T.get(this), $thisType.T.get(this).$Cast(lhs.Vector2$b1$Y$value / scaler)));
  };

  function Vector2$b1_op_Implicit (someValue) {
    return new ($thisType.Of($thisType.T.get(this))) (JSIL.CloneParameter($thisType.T.get(this), someValue.Vector3$b1$X$value), JSIL.CloneParameter($thisType.T.get(this), someValue.Vector3$b1$Y$value));
  };

  function Vector2$b1_op_Inequality (lhs, rhs) {
    var obj = null;
    if (obj = lhs.Vector2$b1$X$value !== rhs.Vector2$b1$X$value) {
      var arg_1B8_2 = obj;
    } else {
      var arg_1B3_2 = obj;
      arg_1B8_2 = arg_1B3_2 | (lhs.Vector2$b1$Y$value !== rhs.Vector2$b1$Y$value);
    }
    return $T01().$Cast(arg_1B8_2);
  };

  function Vector2$b1_op_Multiply (lhs, scaler) {
    var arg_149_0 = $thisType.T.get(this).$Cast(lhs.Vector2$b1$X$value * scaler);
    return new ($thisType.Of($thisType.T.get(this))) (JSIL.CloneParameter($thisType.T.get(this), arg_149_0), JSIL.CloneParameter($thisType.T.get(this), $thisType.T.get(this).$Cast(lhs.Vector2$b1$Y$value * scaler)));
  };

  function Vector2$b1_op_Subtraction (lhs, rhs) {
    var arg_155_0 = $thisType.T.get(this).$Cast(lhs.Vector2$b1$X$value - rhs.Vector2$b1$X$value);
    return new ($thisType.Of($thisType.T.get(this))) (JSIL.CloneParameter($thisType.T.get(this), arg_155_0), JSIL.CloneParameter($thisType.T.get(this), $thisType.T.get(this).$Cast(lhs.Vector2$b1$Y$value - rhs.Vector2$b1$Y$value)));
  };

  function Vector2$b1_Rotate (deg) {
    var rad = Math.fround(+((+deg * 3.1415926535897931) / 180));
    var s = Math.fround(Math.sin(rad));
    var c = Math.fround(Math.cos(rad));
    var arg_178_2 = this.Vector2$b1$X$value * c;
    var arg_2D8_0 = $thisType.T.get(this).$Cast(arg_178_2 - (this.Vector2$b1$Y$value * s));
    var arg_2CE_2 = this.Vector2$b1$X$value * s;
    return new ($thisType.Of($thisType.T.get(this))) (JSIL.CloneParameter($thisType.T.get(this), arg_2D8_0), JSIL.CloneParameter($thisType.T.get(this), $thisType.T.get(this).$Cast(arg_2CE_2 + (this.Vector2$b1$Y$value * c))));
  };

  function Vector2$b1_set_X (value) {
    this.Vector2$b1$X$value = value;
  };

  function Vector2$b1_set_Y (value) {
    this.Vector2$b1$Y$value = value;
  };

  function Vector2$b1_toString () {
    return $T05().Format(JSIL.ConcatString.apply(null, JSIL.Array.New($T00(), ["[Vector2(", this.Vector2$b1$X$value, ",", this.Vector2$b1$Y$value, ")]"])), JSIL.Array.New($T00(), 0));
  };

  JSIL.MakeType({
      BaseType: $asm0B.TypeRef("System.ValueType"), 
      Name: "WWUtils.Math.Vector2`1", 
      IsPublic: true, 
      IsReferenceType: false, 
      GenericParameters: ["T"], 
      MaximumConstructorArguments: 2, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.GenericParameter("T"), $.GenericParameter("T")]), 
      Vector2$b1__ctor
    );

    $.Method({Static:false, Public:true }, "Dot", 
      new JSIL.MethodSignature($.GenericParameter("T"), [$asm0A.TypeRef("WWUtils.Math.Vector2`1", [$.GenericParameter("T")])]), 
      Vector2$b1_Dot
    );

    $.Method({Static:false, Public:true }, "get_X", 
      new JSIL.MethodSignature($.GenericParameter("T"), null), 
      Vector2$b1_get_X
    )
      .Attribute($asm0B.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "get_Y", 
      new JSIL.MethodSignature($.GenericParameter("T"), null), 
      Vector2$b1_get_Y
    )
      .Attribute($asm0B.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:true , Public:true }, "op_Addition", 
      new JSIL.MethodSignature($asm0A.TypeRef("WWUtils.Math.Vector2`1", [$.GenericParameter("T")]), [$asm0A.TypeRef("WWUtils.Math.Vector2`1", [$.GenericParameter("T")]), $asm0A.TypeRef("WWUtils.Math.Vector2`1", [$.GenericParameter("T")])]), 
      Vector2$b1_op_Addition
    );

    $.Method({Static:true , Public:true }, "op_Division", 
      new JSIL.MethodSignature($asm0A.TypeRef("WWUtils.Math.Vector2`1", [$.GenericParameter("T")]), [$asm0A.TypeRef("WWUtils.Math.Vector2`1", [$.GenericParameter("T")]), $.GenericParameter("T")]), 
      Vector2$b1_op_Division
    );

    $.Method({Static:true , Public:true }, "op_Equality", 
      new JSIL.MethodSignature($.Boolean, [$asm0A.TypeRef("WWUtils.Math.Vector2`1", [$.GenericParameter("T")]), $asm0A.TypeRef("WWUtils.Math.Vector2`1", [$.GenericParameter("T")])]), 
      JSIL.UntranslatableFunction("System.Boolean WWUtils.Math.Vector2`1::op_Equality(WWUtils.Math.Vector2`1<T>,WWUtils.Math.Vector2`1<T>)")
    );

    $.Method({Static:true , Public:true }, "op_Implicit", 
      new JSIL.MethodSignature($asm0A.TypeRef("WWUtils.Math.Vector2`1", [$.GenericParameter("T")]), [$asm0A.TypeRef("WWUtils.Math.Vector3`1", [$.GenericParameter("T")])]), 
      Vector2$b1_op_Implicit
    );

    $.Method({Static:true , Public:true }, "op_Inequality", 
      new JSIL.MethodSignature($.Boolean, [$asm0A.TypeRef("WWUtils.Math.Vector2`1", [$.GenericParameter("T")]), $asm0A.TypeRef("WWUtils.Math.Vector2`1", [$.GenericParameter("T")])]), 
      Vector2$b1_op_Inequality
    );

    $.Method({Static:true , Public:true }, "op_Multiply", 
      new JSIL.MethodSignature($asm0A.TypeRef("WWUtils.Math.Vector2`1", [$.GenericParameter("T")]), [$asm0A.TypeRef("WWUtils.Math.Vector2`1", [$.GenericParameter("T")]), $.GenericParameter("T")]), 
      Vector2$b1_op_Multiply
    );

    $.Method({Static:true , Public:true }, "op_Subtraction", 
      new JSIL.MethodSignature($asm0A.TypeRef("WWUtils.Math.Vector2`1", [$.GenericParameter("T")]), [$asm0A.TypeRef("WWUtils.Math.Vector2`1", [$.GenericParameter("T")]), $asm0A.TypeRef("WWUtils.Math.Vector2`1", [$.GenericParameter("T")])]), 
      Vector2$b1_op_Subtraction
    );

    $.Method({Static:false, Public:true }, "Rotate", 
      new JSIL.MethodSignature($asm0A.TypeRef("WWUtils.Math.Vector2`1", [$.GenericParameter("T")]), [$.Single]), 
      Vector2$b1_Rotate
    );

    $.Method({Static:false, Public:true }, "set_X", 
      new JSIL.MethodSignature(null, [$.GenericParameter("T")]), 
      Vector2$b1_set_X
    )
      .Attribute($asm0B.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "set_Y", 
      new JSIL.MethodSignature(null, [$.GenericParameter("T")]), 
      Vector2$b1_set_Y
    )
      .Attribute($asm0B.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true , Virtual:true }, "toString", 
      JSIL.MethodSignature.Return($.String), 
      Vector2$b1_toString
    );

    $.Field({Static:false, Public:false}, "Vector2$b1$X$value", $.GenericParameter("T"))
      .Attribute($asm0B.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute")); 
    $.Field({Static:false, Public:false}, "Vector2$b1$Y$value", $.GenericParameter("T"))
      .Attribute($asm0B.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute")); 
    $.Property({Static:false, Public:true }, "X", $.GenericParameter("T"));

    $.Property({Static:false, Public:true }, "Y", $.GenericParameter("T"));

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* struct WWUtils.Math.Vector3`1 */ 

(function Vector3$b1$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm0B.System.Object)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm0B.System.String)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize(System.Array.Of($asm0B.System.Object))) ();
  };

  function Vector3$b1__ctor (x, y, z) {
    JSIL.CopyMembers(new ($thisType.Of($thisType.T.get(this))) (), this);
    (this.Vector3$b1$X$value = x);
    (this.Vector3$b1$Y$value = y);
    (this.Vector3$b1$Z$value = z);
  };

  function Vector3$b1_Dot (rhs) {
    var arg_1A7_2 = this.Vector3$b1$X$value * rhs.Vector3$b1$X$value;
    var arg_212_2 = arg_1A7_2 + (this.Vector3$b1$Y$value * rhs.Vector3$b1$Y$value);
    return $thisType.T.get(this).$Cast(arg_212_2 + (this.Vector3$b1$Z$value * rhs.Vector3$b1$Z$value));
  };

  function Vector3$b1_get_X () {
    return this.Vector3$b1$X$value;
  };

  function Vector3$b1_get_Y () {
    return this.Vector3$b1$Y$value;
  };

  function Vector3$b1_get_Z () {
    return this.Vector3$b1$Z$value;
  };

  function Vector3$b1_op_Addition (lhs, rhs) {
    var arg_1FC_0 = $thisType.T.get(this).$Cast(lhs.Vector3$b1$X$value + rhs.Vector3$b1$X$value);
    var arg_1FC_1 = $thisType.T.get(this).$Cast(lhs.Vector3$b1$Y$value + rhs.Vector3$b1$Y$value);
    return new ($thisType.Of($thisType.T.get(this))) (JSIL.CloneParameter($thisType.T.get(this), arg_1FC_0), JSIL.CloneParameter($thisType.T.get(this), arg_1FC_1), JSIL.CloneParameter($thisType.T.get(this), $thisType.T.get(this).$Cast(lhs.Vector3$b1$Z$value + rhs.Vector3$b1$Z$value)));
  };

  function Vector3$b1_op_Division (lhs, scaler) {
    var arg_1ED_0 = $thisType.T.get(this).$Cast(lhs.Vector3$b1$X$value / scaler);
    var arg_1ED_1 = $thisType.T.get(this).$Cast(lhs.Vector3$b1$Y$value / scaler);
    return new ($thisType.Of($thisType.T.get(this))) (JSIL.CloneParameter($thisType.T.get(this), arg_1ED_0), JSIL.CloneParameter($thisType.T.get(this), arg_1ED_1), JSIL.CloneParameter($thisType.T.get(this), $thisType.T.get(this).$Cast(lhs.Vector3$b1$Z$value / scaler)));
  };

  function Vector3$b1_op_Implicit (someValue) {
    return new ($thisType.Of($thisType.T.get(this))) (JSIL.CloneParameter($thisType.T.get(this), someValue.Vector2$b1$X$value), JSIL.CloneParameter($thisType.T.get(this), someValue.Vector2$b1$Y$value), (
        $thisType.T.get(this).IsValueType
           ? JSIL.CreateInstanceOfType($thisType.T.get(this))
           : null)
    );
  };

  function Vector3$b1_op_Multiply$00 (lhs, scaler) {
    var arg_1ED_0 = $thisType.T.get(this).$Cast(lhs.Vector3$b1$X$value * scaler);
    var arg_1ED_1 = $thisType.T.get(this).$Cast(lhs.Vector3$b1$Y$value * scaler);
    return new ($thisType.Of($thisType.T.get(this))) (JSIL.CloneParameter($thisType.T.get(this), arg_1ED_0), JSIL.CloneParameter($thisType.T.get(this), arg_1ED_1), JSIL.CloneParameter($thisType.T.get(this), $thisType.T.get(this).$Cast(lhs.Vector3$b1$Z$value * scaler)));
  };

  function Vector3$b1_op_Multiply$01 (lhs, rhs) {
    var arg_15C_2 = lhs.Vector3$b1$Y$value * rhs.Vector3$b1$Z$value;
    var cx = $thisType.T.get(this).$Cast(arg_15C_2 - (lhs.Vector3$b1$Z$value * rhs.Vector3$b1$Y$value));
    var arg_2C2_2 = lhs.Vector3$b1$Z$value * rhs.Vector3$b1$X$value;
    var cy = $thisType.T.get(this).$Cast(arg_2C2_2 - (lhs.Vector3$b1$X$value * rhs.Vector3$b1$Z$value));
    var arg_428_2 = lhs.Vector3$b1$X$value * rhs.Vector3$b1$Y$value;
    var cz = $thisType.T.get(this).$Cast(arg_428_2 - (lhs.Vector3$b1$Y$value * rhs.Vector3$b1$X$value));
    return new ($thisType.Of($thisType.T.get(this))) (JSIL.CloneParameter($thisType.T.get(this), cx), JSIL.CloneParameter($thisType.T.get(this), cy), JSIL.CloneParameter($thisType.T.get(this), cz));
  };

  function Vector3$b1_op_Subtraction (lhs, rhs) {
    var arg_1FF_0 = $thisType.T.get(this).$Cast(lhs.Vector3$b1$X$value - rhs.Vector3$b1$X$value);
    var arg_1FF_1 = $thisType.T.get(this).$Cast(lhs.Vector3$b1$Y$value - rhs.Vector3$b1$Y$value);
    return new ($thisType.Of($thisType.T.get(this))) (JSIL.CloneParameter($thisType.T.get(this), arg_1FF_0), JSIL.CloneParameter($thisType.T.get(this), arg_1FF_1), JSIL.CloneParameter($thisType.T.get(this), $thisType.T.get(this).$Cast(lhs.Vector3$b1$Z$value - rhs.Vector3$b1$Z$value)));
  };

  function Vector3$b1_set_X (value) {
    this.Vector3$b1$X$value = value;
  };

  function Vector3$b1_set_Y (value) {
    this.Vector3$b1$Y$value = value;
  };

  function Vector3$b1_set_Z (value) {
    this.Vector3$b1$Z$value = value;
  };

  function Vector3$b1_toString () {
    return $T01().Format(JSIL.ConcatString.apply(null, JSIL.Array.New($T00(), ["[Vector3(", this.Vector3$b1$X$value, ",", this.Vector3$b1$Y$value, ",", this.Vector3$b1$Z$value, ")]"])), JSIL.Array.New($T00(), 0));
  };

  JSIL.MakeType({
      BaseType: $asm0B.TypeRef("System.ValueType"), 
      Name: "WWUtils.Math.Vector3`1", 
      IsPublic: true, 
      IsReferenceType: false, 
      GenericParameters: ["T"], 
      MaximumConstructorArguments: 3, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.GenericParameter("T"), $.GenericParameter("T"), 
          $.GenericParameter("T")
        ]), 
      Vector3$b1__ctor
    );

    $.Method({Static:false, Public:true }, "Dot", 
      new JSIL.MethodSignature($.GenericParameter("T"), [$asm0A.TypeRef("WWUtils.Math.Vector3`1", [$.GenericParameter("T")])]), 
      Vector3$b1_Dot
    );

    $.Method({Static:false, Public:true }, "get_X", 
      new JSIL.MethodSignature($.GenericParameter("T"), null), 
      Vector3$b1_get_X
    )
      .Attribute($asm0B.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "get_Y", 
      new JSIL.MethodSignature($.GenericParameter("T"), null), 
      Vector3$b1_get_Y
    )
      .Attribute($asm0B.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "get_Z", 
      new JSIL.MethodSignature($.GenericParameter("T"), null), 
      Vector3$b1_get_Z
    )
      .Attribute($asm0B.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:true , Public:true }, "op_Addition", 
      new JSIL.MethodSignature($asm0A.TypeRef("WWUtils.Math.Vector3`1", [$.GenericParameter("T")]), [$asm0A.TypeRef("WWUtils.Math.Vector3`1", [$.GenericParameter("T")]), $asm0A.TypeRef("WWUtils.Math.Vector3`1", [$.GenericParameter("T")])]), 
      Vector3$b1_op_Addition
    );

    $.Method({Static:true , Public:true }, "op_Division", 
      new JSIL.MethodSignature($asm0A.TypeRef("WWUtils.Math.Vector3`1", [$.GenericParameter("T")]), [$asm0A.TypeRef("WWUtils.Math.Vector3`1", [$.GenericParameter("T")]), $.GenericParameter("T")]), 
      Vector3$b1_op_Division
    );

    $.Method({Static:true , Public:true }, "op_Implicit", 
      new JSIL.MethodSignature($asm0A.TypeRef("WWUtils.Math.Vector3`1", [$.GenericParameter("T")]), [$asm0A.TypeRef("WWUtils.Math.Vector2`1", [$.GenericParameter("T")])]), 
      Vector3$b1_op_Implicit
    );

    $.Method({Static:true , Public:true }, "op_Multiply", 
      new JSIL.MethodSignature($asm0A.TypeRef("WWUtils.Math.Vector3`1", [$.GenericParameter("T")]), [$asm0A.TypeRef("WWUtils.Math.Vector3`1", [$.GenericParameter("T")]), $.GenericParameter("T")]), 
      Vector3$b1_op_Multiply$00
    );

    $.Method({Static:true , Public:true }, "op_Multiply", 
      new JSIL.MethodSignature($asm0A.TypeRef("WWUtils.Math.Vector3`1", [$.GenericParameter("T")]), [$asm0A.TypeRef("WWUtils.Math.Vector3`1", [$.GenericParameter("T")]), $asm0A.TypeRef("WWUtils.Math.Vector3`1", [$.GenericParameter("T")])]), 
      Vector3$b1_op_Multiply$01
    );

    $.Method({Static:true , Public:true }, "op_Subtraction", 
      new JSIL.MethodSignature($asm0A.TypeRef("WWUtils.Math.Vector3`1", [$.GenericParameter("T")]), [$asm0A.TypeRef("WWUtils.Math.Vector3`1", [$.GenericParameter("T")]), $asm0A.TypeRef("WWUtils.Math.Vector3`1", [$.GenericParameter("T")])]), 
      Vector3$b1_op_Subtraction
    );

    $.Method({Static:false, Public:true }, "set_X", 
      new JSIL.MethodSignature(null, [$.GenericParameter("T")]), 
      Vector3$b1_set_X
    )
      .Attribute($asm0B.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "set_Y", 
      new JSIL.MethodSignature(null, [$.GenericParameter("T")]), 
      Vector3$b1_set_Y
    )
      .Attribute($asm0B.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "set_Z", 
      new JSIL.MethodSignature(null, [$.GenericParameter("T")]), 
      Vector3$b1_set_Z
    )
      .Attribute($asm0B.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true , Virtual:true }, "toString", 
      JSIL.MethodSignature.Return($.String), 
      Vector3$b1_toString
    );

    $.Field({Static:false, Public:false}, "Vector3$b1$X$value", $.GenericParameter("T"))
      .Attribute($asm0B.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute")); 
    $.Field({Static:false, Public:false}, "Vector3$b1$Y$value", $.GenericParameter("T"))
      .Attribute($asm0B.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute")); 
    $.Field({Static:false, Public:false}, "Vector3$b1$Z$value", $.GenericParameter("T"))
      .Attribute($asm0B.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute")); 
    $.Property({Static:false, Public:true }, "X", $.GenericParameter("T"));

    $.Property({Static:false, Public:true }, "Y", $.GenericParameter("T"));

    $.Property({Static:false, Public:true }, "Z", $.GenericParameter("T"));

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class WWUtils.Registry */ 

(function Registry$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm0B.System.Collections.Generic.Dictionary$b2.Of($asm0B.System.Type, $asm0B.System.Collections.Generic.List$b1.Of($asm0B.System.Object)))) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm0B.System.Type)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm0B.System.Object)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm0B.System.Collections.Generic.List$b1.Of($asm0B.System.Object))) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize(System.Array.Of($asm0B.System.Type))) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm0B.System.Int32)) ();
  };
  var $T06 = function () {
    return ($T06 = JSIL.Memoize($asm06.System.Linq.Enumerable)) ();
  };
  var $T07 = function () {
    return ($T07 = JSIL.Memoize($asm0A.WWUtils.MissingServiceException)) ();
  };
  var $T08 = function () {
    return ($T08 = JSIL.Memoize($asm0B.System.String)) ();
  };
  var $S00 = function () {
    return ($S00 = JSIL.Memoize(new JSIL.ConstructorSignature($asm0B.TypeRef("System.Collections.Generic.Dictionary`2", [$asm0B.TypeRef("System.Type"), $asm0B.TypeRef("System.Collections.Generic.List`1", [$asm0B.TypeRef("System.Object")])]), null))) ();
  };
  var $S01 = function () {
    return ($S01 = JSIL.Memoize(new JSIL.ConstructorSignature($asm0B.TypeRef("System.Collections.Generic.List`1", [$asm0B.TypeRef("System.Object")]), null))) ();
  };

  function Registry_AddToRegistry (t, obj) {
    if (!$thisType.repository.ContainsKey(t)) {
      $thisType.repository.Add(t, $S01().Construct());
    }
    ($thisType.repository.get_Item(t)).Add(obj);
    var interfaces = t.GetInterfaces();

    for (var i = 0; i < (interfaces.length | 0); i = ((i + 1) | 0)) {
      var intf = interfaces[i];
      $thisType.AddToRegistry(intf, obj);
    }
    if (!((t.get_BaseType() === null) || (t === $T02().__Type__))) {
      $thisType.AddToRegistry(t.get_BaseType(), obj);
    }
  };

  function Registry_Lookup$b1 (T) {
    var tarray = $thisType.LookupAll$b1(T)();
    if ((tarray.length | 0) === 0) {
      var result = (
        T.IsValueType
           ? JSIL.CreateInstanceOfType(T)
           : null)
      ;
    } else {
      result = JSIL.CloneParameter(T, tarray[0]);
    }
    return result;
  };

  function Registry_LookupAll$b1 (T) {
    if (!$thisType.repository.ContainsKey(T)) {
      var result = JSIL.Array.New(T, 0);
    } else {
      result = $T06().ToArray$b1(T)($T06().Cast$b1(T)($thisType.repository.get_Item(T)));
    }
    return result;
  };

  function Registry_Register (obj) {
    $thisType.AddToRegistry(JSIL.GetType(obj), obj);
  };

  function Registry_Require$b1 (T) {
    if (!$thisType.repository.ContainsKey(T)) {
      throw new ($T07())(("Error: Requires a service that implements " + T.get_FullName() + " be registered with the Registry."));
    }
  };

  JSIL.MakeStaticClass("WWUtils.Registry", true, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:true , Public:false}, "AddToRegistry", 
      new JSIL.MethodSignature(null, [$asm0B.TypeRef("System.Type"), $.Object]), 
      Registry_AddToRegistry
    );

    $.Method({Static:true , Public:true }, "Lookup", 
      new JSIL.MethodSignature("!!0", null, ["T"]), 
      Registry_Lookup$b1
    );

    $.Method({Static:true , Public:true }, "LookupAll", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", ["!!0"]), null, ["T"]), 
      Registry_LookupAll$b1
    );

    $.Method({Static:true , Public:true }, "Register", 
      JSIL.MethodSignature.Action($.Object), 
      Registry_Register
    );

    $.Method({Static:true , Public:true }, "Require", 
      new JSIL.MethodSignature(null, null, ["T"]), 
      Registry_Require$b1
    );

    $.Field({Static:true , Public:false}, "repository", $asm0B.TypeRef("System.Collections.Generic.Dictionary`2", [$asm0B.TypeRef("System.Type"), $asm0B.TypeRef("System.Collections.Generic.List`1", [$.Object])])); 
    function Registry__cctor () {
      $thisType.repository = $S00().Construct();
    };


    $.Method({Static:true , Public:false}, ".cctor", 
      JSIL.MethodSignature.Void, 
      Registry__cctor
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* struct WWUtils.Math.Rect`1 */ 

(function Rect$b1$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm0B.System.Object)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm0B.System.Math)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm0B.System.Boolean)) ();
  };

  function Rect$b1__ctor (x, y, width, height) {
    this.position = new ($asm0A.WWUtils.Math.Vector2$b1.Of($thisType.T.get(this))) (x, y);
    this.size = new ($asm0A.WWUtils.Math.Vector2$b1.Of($thisType.T.get(this))) (width, height);
  };

  function Rect$b1_Clip (other) {
    var newX = (
      (this.position.Vector2$b1$X$value <= other.position.Vector2$b1$X$value)
         ? other.position.Vector2$b1$X$value
         : this.position.Vector2$b1$X$value)
    ;
    var newY = (
      (this.position.Vector2$b1$Y$value <= other.position.Vector2$b1$Y$value)
         ? other.position.Vector2$b1$Y$value
         : this.position.Vector2$b1$Y$value)
    ;
    var arg_368_2 = this.position.Vector2$b1$X$value + this.size.Vector2$b1$X$value;
    if (arg_368_2 < (other.position.Vector2$b1$X$value + other.size.Vector2$b1$X$value)) {
      var arg_45A_2 = this.position.Vector2$b1$X$value + this.size.Vector2$b1$X$value;
    } else {
      arg_45A_2 = other.position.Vector2$b1$X$value + other.size.Vector2$b1$X$value;
    }
    var newX2 = JSIL.CloneParameter($thisType.T.get(this), $thisType.T.get(this).$Cast(arg_45A_2));
    var arg_60F_2 = this.position.Vector2$b1$Y$value + this.size.Vector2$b1$Y$value;
    if (arg_60F_2 < (other.position.Vector2$b1$Y$value + other.size.Vector2$b1$Y$value)) {
      var arg_701_2 = this.position.Vector2$b1$Y$value + this.size.Vector2$b1$Y$value;
    } else {
      arg_701_2 = other.position.Vector2$b1$Y$value + other.size.Vector2$b1$Y$value;
    }
    var newY2 = JSIL.CloneParameter($thisType.T.get(this), $thisType.T.get(this).$Cast(arg_701_2));
    var arg_845_0 = newX;
    var arg_845_1 = newY;
    var arg_845_2 = $thisType.T.get(this).$Cast(newX2 - newX);
    return new ($thisType.Of($thisType.T.get(this))) (JSIL.CloneParameter($thisType.T.get(this), arg_845_0), JSIL.CloneParameter($thisType.T.get(this), arg_845_1), JSIL.CloneParameter($thisType.T.get(this), arg_845_2), JSIL.CloneParameter($thisType.T.get(this), $thisType.T.get(this).$Cast(newY2 - newY)));
  };

  function Rect$b1_Constrain (localPosition) {
    var arg_19F_3 = JSIL.CloneParameter($thisType.T.get(this), this.position.Vector2$b1$X$value);
    (localPosition.Vector2$b1$X$value = JSIL.CloneParameter($thisType.T.get(this), $thisType.T.get(this).$Cast($T01().Max(arg_19F_3, $T01().Min(this.position.Vector2$b1$X$value + this.size.Vector2$b1$X$value, JSIL.CloneParameter($thisType.T.get(this), localPosition.Vector2$b1$X$value))))));
    var arg_34C_3 = JSIL.CloneParameter($thisType.T.get(this), this.position.Vector2$b1$Y$value);
    (localPosition.Vector2$b1$Y$value = JSIL.CloneParameter($thisType.T.get(this), $thisType.T.get(this).$Cast($T01().Max(arg_34C_3, $T01().Min(this.position.Vector2$b1$Y$value + this.size.Vector2$b1$Y$value, JSIL.CloneParameter($thisType.T.get(this), localPosition.Vector2$b1$Y$value))))));
    return localPosition;
  };

  function Rect$b1_Contains (point) {
    if (point.Vector2$b1$X$value < this.position.Vector2$b1$X$value) {
      var result = false;
    } else if (point.Vector2$b1$Y$value < this.position.Vector2$b1$Y$value) {
      result = false;
    } else {
      var arg_293_2 = point.Vector2$b1$X$value;
      if (arg_293_2 > (this.position.Vector2$b1$X$value + this.size.Vector2$b1$X$value)) {
        result = false;
      } else {
        var arg_3B8_2 = point.Vector2$b1$Y$value;
        result = arg_3B8_2 <= (this.position.Vector2$b1$Y$value + this.size.Vector2$b1$Y$value);
      }
    }
    return result;
  };

  JSIL.MakeType({
      BaseType: $asm0B.TypeRef("System.ValueType"), 
      Name: "WWUtils.Math.Rect`1", 
      IsPublic: true, 
      IsReferenceType: false, 
      GenericParameters: ["T"], 
      MaximumConstructorArguments: 4, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.GenericParameter("T"), $.GenericParameter("T"), 
          $.GenericParameter("T"), $.GenericParameter("T")
        ]), 
      Rect$b1__ctor
    );

    $.Method({Static:false, Public:true }, "Clip", 
      new JSIL.MethodSignature($asm0A.TypeRef("WWUtils.Math.Rect`1", [$.GenericParameter("T")]), [$asm0A.TypeRef("WWUtils.Math.Rect`1", [$.GenericParameter("T")])]), 
      Rect$b1_Clip
    );

    $.Method({Static:false, Public:true }, "Constrain", 
      new JSIL.MethodSignature($asm0A.TypeRef("WWUtils.Math.Vector2`1", [$.GenericParameter("T")]), [$asm0A.TypeRef("WWUtils.Math.Vector2`1", [$.GenericParameter("T")])]), 
      Rect$b1_Constrain
    );

    $.Method({Static:false, Public:true }, "Contains", 
      new JSIL.MethodSignature($.Boolean, [$asm0A.TypeRef("WWUtils.Math.Vector2`1", [$.GenericParameter("T")])]), 
      Rect$b1_Contains
    );

    $.Field({Static:false, Public:true }, "position", $asm0A.TypeRef("WWUtils.Math.Vector2`1", [$.GenericParameter("T")])); 
    $.Field({Static:false, Public:true }, "size", $asm0A.TypeRef("WWUtils.Math.Vector2`1", [$.GenericParameter("T")])); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* struct WWUtils.Math.Insets`1 */ 

(function Insets$b1$Members () {
  var $, $thisType;
  function Insets$b1__ctor (top, left, bottom, right) {
    this.topLeft = new ($asm0A.WWUtils.Math.Vector2$b1.Of($thisType.T.get(this))) (left, top);
    this.bottomRight = new ($asm0A.WWUtils.Math.Vector2$b1.Of($thisType.T.get(this))) (right, bottom);
  };

  JSIL.MakeType({
      BaseType: $asm0B.TypeRef("System.ValueType"), 
      Name: "WWUtils.Math.Insets`1", 
      IsPublic: true, 
      IsReferenceType: false, 
      GenericParameters: ["T"], 
      MaximumConstructorArguments: 4, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.GenericParameter("T"), $.GenericParameter("T"), 
          $.GenericParameter("T"), $.GenericParameter("T")
        ]), 
      Insets$b1__ctor
    );

    $.Field({Static:false, Public:true }, "topLeft", $asm0A.TypeRef("WWUtils.Math.Vector2`1", [$.GenericParameter("T")])); 
    $.Field({Static:false, Public:true }, "bottomRight", $asm0A.TypeRef("WWUtils.Math.Vector2`1", [$.GenericParameter("T")])); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class WWUtils.MissingServiceException */ 

(function MissingServiceException$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm0B.System.String)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm0B.System.Exception)) ();
  };

  function MissingServiceException__ctor (message) {
    $T01().prototype._ctor.call(this, message);
  };

  JSIL.MakeType({
      BaseType: $asm0B.TypeRef("System.Exception"), 
      Name: "WWUtils.MissingServiceException", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.String), 
      MissingServiceException__ctor
    );

    $.ImplementInterfaces(
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class WWUtils.LowRentParser.LowRentXMLParser */ 

(function LowRentXMLParser$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm0B.System.IO.Stream)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm09.System.Xml.XmlReader)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm0B.System.String)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm0A.WWUtils.LowRentParser.ParsingException)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm09.System.Xml.XmlNodeType)) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize(System.Array.Of($asm0B.System.String))) ();
  };
  var $T06 = function () {
    return ($T06 = JSIL.Memoize($asm0B.System.Int32)) ();
  };
  var $T07 = function () {
    return ($T07 = JSIL.Memoize($asm0B.System.Object)) ();
  };
  var $T08 = function () {
    return ($T08 = JSIL.Memoize(System.Array.Of($asm0B.System.Object))) ();
  };
  var $T09 = function () {
    return ($T09 = JSIL.Memoize($asm0B.System.Collections.Generic.Dictionary$b2.Of($asm0B.System.String, $asm0B.System.String))) ();
  };
  var $T0A = function () {
    return ($T0A = JSIL.Memoize($asm09.System.Xml.IXmlLineInfo)) ();
  };
  var $S00 = function () {
    return ($S00 = JSIL.Memoize(new JSIL.MethodSignature($asm09.TypeRef("System.Xml.XmlReader"), [$asm0B.TypeRef("System.IO.Stream")]))) ();
  };
  var $S01 = function () {
    return ($S01 = JSIL.Memoize(new JSIL.ConstructorSignature($asm0A.TypeRef("WWUtils.LowRentParser.ParsingException"), [$asm0A.TypeRef("WWUtils.LowRentParser.LowRentXMLParser"), $asm0B.TypeRef("System.String")]))) ();
  };
  var $S02 = function () {
    return ($S02 = JSIL.Memoize(new JSIL.MethodSignature($asm0B.TypeRef("System.String"), [$asm0B.TypeRef("System.String")]))) ();
  };
  var $S03 = function () {
    return ($S03 = JSIL.Memoize(new JSIL.ConstructorSignature($asm0B.TypeRef("System.Collections.Generic.Dictionary`2", [$asm0B.TypeRef("System.String"), $asm0B.TypeRef("System.String")]), null))) ();
  };
  var $IM00 = function () {
    return ($IM00 = JSIL.Memoize($asm09.System.Xml.IXmlLineInfo.get_LinePosition)) ();
  };
  var $IM01 = function () {
    return ($IM01 = JSIL.Memoize($asm09.System.Xml.IXmlLineInfo.get_LineNumber)) ();
  };

  function LowRentXMLParser__ctor (stream) {
    this.consumed = true;
    this.rdr = $S00().CallStatic($T01(), "Create", null, stream);
  };

  function LowRentXMLParser_Close () {
    (this.rdr).Dispose();
  };

  function LowRentXMLParser_ExpectAttribute (attrName) {
    var v = this.GetAttribute(attrName);
    if (v === null) {
      throw $S01().Construct(this, JSIL.ConcatString("Attribute not found in currrent node: ", attrName));
    }
    return v;
  };

  function LowRentXMLParser_ExpectElementEnd (expectedElementName) {
    var v = this.GetElementEnd();
    if (v === null) {
      throw $S01().Construct(this, JSIL.ConcatString("Expected element end, found node type ", (this.rdr).get_NodeType()));
    }
    if (v != expectedElementName) {
      throw $S01().Construct(this, ("Expected element end names " + expectedElementName + " found name " + v));
    }
  };

  function LowRentXMLParser_ExpectElementStart (expectedElementNames) {
    var v = this.GetElementStart();
    if (v === null) {
      throw $S01().Construct(this, JSIL.ConcatString("Expected element start, found node type ", (this.rdr).get_NodeType()));
    }
    if ((expectedElementNames.length | 0) > 0) {

      for (var i = 0; i < (expectedElementNames.length | 0); i = ((i + 1) | 0)) {
        var nodeName = expectedElementNames[i];
        if (v == nodeName) {
          var result = v;
          return result;
        }
      }
      throw $S01().Construct(this, JSIL.ConcatString.apply(null, JSIL.Array.New($T07(), ["Expected node names ", expectedElementNames, " found node named ", (this.rdr).get_Name()])));
    }
    result = v;
    return result;
  };

  function LowRentXMLParser_ExpectValue () {
    var v = this.GetValue();
    if (v === null) {
      throw $S01().Construct(this, JSIL.ConcatString("Expected Text node, found ", (this.rdr).get_NodeType()));
    }
    return v;
  };

  function LowRentXMLParser_ExpectXMLDecleration () {
    var fileAttributes = this.GetXMLDecleration();
    if (fileAttributes === null) {
      throw $S01().Construct(this, JSIL.ConcatString("Expected node type XmlDecleration, found type ", (this.rdr).get_NodeType()));
    }
    return fileAttributes;
  };

  function LowRentXMLParser_get_CurrentCharacterNumber () {
    if ($T0A().$As(this.rdr) !== null) {
      var result = ($IM00().Call($T0A().$Cast(this.rdr), null) | 0);
    } else {
      result = -1;
    }
    return result;
  };

  function LowRentXMLParser_get_CurrentLineNumber () {
    if ($T0A().$As(this.rdr) !== null) {
      var result = ($IM01().Call($T0A().$Cast(this.rdr), null) | 0);
    } else {
      result = -1;
    }
    return result;
  };

  function LowRentXMLParser_GetAttribute (attrName) {
    return $S02().CallVirtual("GetAttribute", null, this.rdr, attrName);
  };

  function LowRentXMLParser_GetElementEnd () {
    if (!(this.rdr).get_IsEmptyElement()) {
      this.MakeTokenCurrent();
      if ((this.rdr).get_NodeType() !== $T04().EndElement) {
        var result = null;
        return result;
      }
    }
    this.consumed = true;
    result = (this.rdr).get_Name();
    return result;
  };

  function LowRentXMLParser_GetElementStart () {
    this.MakeTokenCurrent();
    if ((this.rdr).get_NodeType() !== $T04().Element) {
      var result = null;
    } else {
      this.consumed = true;
      result = (this.rdr).get_Name();
    }
    return result;
  };

  function LowRentXMLParser_GetValue () {
    this.MakeTokenCurrent();
    if ((this.rdr).get_NodeType() !== $T04().Text) {
      var result = null;
    } else {
      this.consumed = true;
      result = (this.rdr).get_Value();
    }
    return result;
  };

  function LowRentXMLParser_GetXMLDecleration () {
    this.MakeTokenCurrent();
    if ((this.rdr).get_NodeType() !== $T04().XmlDeclaration) {
      var result = null;
    } else {
      var fileAttributes = $S03().Construct();
      (this.rdr).MoveToFirstAttribute();

      do {
        fileAttributes.set_Item(
          (this.rdr).get_Name(), 
          (this.rdr).get_Value()
        );
      } while ((this.rdr).MoveToNextAttribute());
      this.consumed = true;
      result = fileAttributes;
    }
    return result;
  };

  function LowRentXMLParser_MakeTokenCurrent () {
    if (!(!this.consumed || (this.rdr).Read())) {
      throw $S01().Construct(this, "Unexpected end of XML file.");
    }

    while (((this.rdr).get_NodeType() === $T04().Whitespace) || ((this.rdr).get_NodeType() === $T04().Comment)) {
      if (!(this.rdr).Read()) {
        throw $S01().Construct(this, "Unexpected end of XML file.");
      }
    }
    this.consumed = false;
  };

  JSIL.MakeType({
      BaseType: $asm0B.TypeRef("System.Object"), 
      Name: "WWUtils.LowRentParser.LowRentXMLParser", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm0B.TypeRef("System.IO.Stream")), 
      LowRentXMLParser__ctor
    );

    $.Method({Static:false, Public:true }, "Close", 
      JSIL.MethodSignature.Void, 
      LowRentXMLParser_Close
    );

    $.Method({Static:false, Public:true }, "ExpectAttribute", 
      new JSIL.MethodSignature($.String, [$.String]), 
      LowRentXMLParser_ExpectAttribute
    );

    $.Method({Static:false, Public:true }, "ExpectElementEnd", 
      JSIL.MethodSignature.Action($.String), 
      LowRentXMLParser_ExpectElementEnd
    );

    $.Method({Static:false, Public:true }, "ExpectElementStart", 
      new JSIL.MethodSignature($.String, [$jsilcore.TypeRef("System.Array", [$.String])]), 
      LowRentXMLParser_ExpectElementStart
    )
      .Parameter(0, "expectedElementNames", function (_) {
          _.Attribute($asm0B.TypeRef("System.ParamArrayAttribute"))
        });

    $.Method({Static:false, Public:true }, "ExpectValue", 
      JSIL.MethodSignature.Return($.String), 
      LowRentXMLParser_ExpectValue
    );

    $.Method({Static:false, Public:true }, "ExpectXMLDecleration", 
      JSIL.MethodSignature.Return($asm0B.TypeRef("System.Collections.Generic.Dictionary`2", [$.String, $.String])), 
      LowRentXMLParser_ExpectXMLDecleration
    );

    $.Method({Static:false, Public:true }, "get_CurrentCharacterNumber", 
      JSIL.MethodSignature.Return($.Int32), 
      LowRentXMLParser_get_CurrentCharacterNumber
    );

    $.Method({Static:false, Public:true }, "get_CurrentLineNumber", 
      JSIL.MethodSignature.Return($.Int32), 
      LowRentXMLParser_get_CurrentLineNumber
    );

    $.Method({Static:false, Public:true }, "GetAttribute", 
      new JSIL.MethodSignature($.String, [$.String]), 
      LowRentXMLParser_GetAttribute
    );

    $.Method({Static:false, Public:true }, "GetElementEnd", 
      JSIL.MethodSignature.Return($.String), 
      LowRentXMLParser_GetElementEnd
    );

    $.Method({Static:false, Public:true }, "GetElementStart", 
      JSIL.MethodSignature.Return($.String), 
      LowRentXMLParser_GetElementStart
    );

    $.Method({Static:false, Public:true }, "GetValue", 
      JSIL.MethodSignature.Return($.String), 
      LowRentXMLParser_GetValue
    );

    $.Method({Static:false, Public:true }, "GetXMLDecleration", 
      JSIL.MethodSignature.Return($asm0B.TypeRef("System.Collections.Generic.Dictionary`2", [$.String, $.String])), 
      LowRentXMLParser_GetXMLDecleration
    );

    $.Method({Static:false, Public:true }, "MakeTokenCurrent", 
      JSIL.MethodSignature.Void, 
      LowRentXMLParser_MakeTokenCurrent
    );

    $.Field({Static:false, Public:false}, "rdr", $asm09.TypeRef("System.Xml.XmlReader")); 
    $.Field({Static:false, Public:false}, "consumed", $.Boolean); 
    $.Property({Static:false, Public:true }, "CurrentLineNumber", $.Int32);

    $.Property({Static:false, Public:true }, "CurrentCharacterNumber", $.Int32);

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* struct WWUtils.Math.Matrix`1 */ 

(function Matrix$b1$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm0B.System.NotImplementedException)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm0B.System.Object)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm0B.System.Math)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm0B.System.Double)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm0B.System.Boolean)) ();
  };
  var $S00 = function () {
    return ($S00 = JSIL.Memoize(new JSIL.ConstructorSignature($asm0B.TypeRef("System.NotImplementedException"), null))) ();
  };

  function Matrix$b1__ctor (m11, m12, m13, m14, m21, m22, m23, m24, m31, m32, m33, m34, m41, m42, m43, m44) {
    this.M11 = m11;
    this.M12 = m12;
    this.M13 = m13;
    this.M14 = m14;
    this.M21 = m21;
    this.M22 = m22;
    this.M23 = m23;
    this.M24 = m24;
    this.M31 = m31;
    this.M32 = m32;
    this.M33 = m33;
    this.M34 = m34;
    this.M41 = m41;
    this.M42 = m42;
    this.M43 = m43;
    this.M44 = m44;
  };

  function Matrix$b1_Add$00 (matrix1, matrix2) {
    matrix1.M11 = JSIL.CloneParameter($thisType.T.get(this), $thisType.T.get(this).$Cast(matrix1.M11 += matrix2.M11));
    matrix1.M12 = JSIL.CloneParameter($thisType.T.get(this), $thisType.T.get(this).$Cast(matrix1.M12 += matrix2.M12));
    matrix1.M13 = JSIL.CloneParameter($thisType.T.get(this), $thisType.T.get(this).$Cast(matrix1.M13 += matrix2.M13));
    matrix1.M14 = JSIL.CloneParameter($thisType.T.get(this), $thisType.T.get(this).$Cast(matrix1.M14 += matrix2.M14));
    matrix1.M21 = JSIL.CloneParameter($thisType.T.get(this), $thisType.T.get(this).$Cast(matrix1.M21 += matrix2.M21));
    matrix1.M22 = JSIL.CloneParameter($thisType.T.get(this), $thisType.T.get(this).$Cast(matrix1.M22 += matrix2.M22));
    matrix1.M23 = JSIL.CloneParameter($thisType.T.get(this), $thisType.T.get(this).$Cast(matrix1.M23 += matrix2.M23));
    matrix1.M24 = JSIL.CloneParameter($thisType.T.get(this), $thisType.T.get(this).$Cast(matrix1.M24 += matrix2.M24));
    matrix1.M31 = JSIL.CloneParameter($thisType.T.get(this), $thisType.T.get(this).$Cast(matrix1.M31 += matrix2.M31));
    matrix1.M32 = JSIL.CloneParameter($thisType.T.get(this), $thisType.T.get(this).$Cast(matrix1.M32 += matrix2.M32));
    matrix1.M33 = JSIL.CloneParameter($thisType.T.get(this), $thisType.T.get(this).$Cast(matrix1.M33 += matrix2.M33));
    matrix1.M34 = JSIL.CloneParameter($thisType.T.get(this), $thisType.T.get(this).$Cast(matrix1.M34 += matrix2.M34));
    matrix1.M41 = JSIL.CloneParameter($thisType.T.get(this), $thisType.T.get(this).$Cast(matrix1.M41 += matrix2.M41));
    matrix1.M42 = JSIL.CloneParameter($thisType.T.get(this), $thisType.T.get(this).$Cast(matrix1.M42 += matrix2.M42));
    matrix1.M43 = JSIL.CloneParameter($thisType.T.get(this), $thisType.T.get(this).$Cast(matrix1.M43 += matrix2.M43));
    matrix1.M44 = JSIL.CloneParameter($thisType.T.get(this), $thisType.T.get(this).$Cast(matrix1.M44 += matrix2.M44));
    return matrix1;
  };

  function Matrix$b1_Add$01 (/* ref */ matrix1, /* ref */ matrix2, /* ref */ result) {
    result.get().M11 = JSIL.CloneParameter($thisType.T.get(this), $thisType.T.get(this).$Cast(matrix1.get().M11 + matrix2.get().M11));
    result.get().M12 = JSIL.CloneParameter($thisType.T.get(this), $thisType.T.get(this).$Cast(matrix1.get().M12 + matrix2.get().M12));
    result.get().M13 = JSIL.CloneParameter($thisType.T.get(this), $thisType.T.get(this).$Cast(matrix1.get().M13 + matrix2.get().M13));
    result.get().M14 = JSIL.CloneParameter($thisType.T.get(this), $thisType.T.get(this).$Cast(matrix1.get().M14 + matrix2.get().M14));
    result.get().M21 = JSIL.CloneParameter($thisType.T.get(this), $thisType.T.get(this).$Cast(matrix1.get().M21 + matrix2.get().M21));
    result.get().M22 = JSIL.CloneParameter($thisType.T.get(this), $thisType.T.get(this).$Cast(matrix1.get().M22 + matrix2.get().M22));
    result.get().M23 = JSIL.CloneParameter($thisType.T.get(this), $thisType.T.get(this).$Cast(matrix1.get().M23 + matrix2.get().M23));
    result.get().M24 = JSIL.CloneParameter($thisType.T.get(this), $thisType.T.get(this).$Cast(matrix1.get().M24 + matrix2.get().M24));
    result.get().M31 = JSIL.CloneParameter($thisType.T.get(this), $thisType.T.get(this).$Cast(matrix1.get().M31 + matrix2.get().M31));
    result.get().M32 = JSIL.CloneParameter($thisType.T.get(this), $thisType.T.get(this).$Cast(matrix1.get().M32 + matrix2.get().M32));
    result.get().M33 = JSIL.CloneParameter($thisType.T.get(this), $thisType.T.get(this).$Cast(matrix1.get().M33 + matrix2.get().M33));
    result.get().M34 = JSIL.CloneParameter($thisType.T.get(this), $thisType.T.get(this).$Cast(matrix1.get().M34 + matrix2.get().M34));
    result.get().M41 = JSIL.CloneParameter($thisType.T.get(this), $thisType.T.get(this).$Cast(matrix1.get().M41 + matrix2.get().M41));
    result.get().M42 = JSIL.CloneParameter($thisType.T.get(this), $thisType.T.get(this).$Cast(matrix1.get().M42 + matrix2.get().M42));
    result.get().M43 = JSIL.CloneParameter($thisType.T.get(this), $thisType.T.get(this).$Cast(matrix1.get().M43 + matrix2.get().M43));
    result.get().M44 = JSIL.CloneParameter($thisType.T.get(this), $thisType.T.get(this).$Cast(matrix1.get().M44 + matrix2.get().M44));
  };

  function Matrix$b1_CreateBillboard$02 (objectPosition, cameraPosition, cameraUpVector, cameraForwardVector) {
    throw $S00().Construct();
  };

  function Matrix$b1_CreateBillboard$03 (/* ref */ objectPosition, /* ref */ cameraPosition, /* ref */ cameraUpVector, cameraForwardVector, /* ref */ result) {
    throw $S00().Construct();
  };

  function Matrix$b1_CreateConstrainedBillboard$04 (objectPosition, cameraPosition, rotateAxis, cameraForwardVector, objectForwardVector) {
    throw $S00().Construct();
  };

  function Matrix$b1_CreateConstrainedBillboard$05 (/* ref */ objectPosition, /* ref */ cameraPosition, /* ref */ rotateAxis, cameraForwardVector, objectForwardVector, /* ref */ result) {
    throw $S00().Construct();
  };

  function Matrix$b1_CreateFromAxisAngle$06 (axis, angle) {
    throw $S00().Construct();
  };

  function Matrix$b1_CreateFromAxisAngle$07 (/* ref */ axis, angle, /* ref */ result) {
    throw $S00().Construct();
  };

  function Matrix$b1_CreateFromQuaternion$08 (quaternion) {
    throw $S00().Construct();
  };

  function Matrix$b1_CreateFromQuaternion$09 (/* ref */ quaternion, /* ref */ result) {
    throw $S00().Construct();
  };

  function Matrix$b1_CreateFromYawPitchRoll (yaw, pitch, roll) {
    throw $S00().Construct();
  };

  function Matrix$b1_CreateLookAt$0A (cameraPosition, cameraTarget, cameraUpVector) {
    var array = null;
    var i = $thisType.Of($thisType.T.get(this)).identity.MemberwiseClone();
    var x = JSIL.Array.New($thisType.T.get(this), 3);
    var y = JSIL.Array.New($thisType.T.get(this), 3);
    var z = JSIL.Array.New($thisType.T.get(this), 3);
    var arg_C7_0 = z;
    arg_C7_0[0] = JSIL.CloneParameter($thisType.T.get(this), $thisType.T.get(this).$Cast(cameraPosition.Vector3$b1$X$value - cameraTarget.Vector3$b1$X$value));
    var arg_177_0 = z;
    arg_177_0[1] = JSIL.CloneParameter($thisType.T.get(this), $thisType.T.get(this).$Cast(cameraPosition.Vector3$b1$Y$value - cameraTarget.Vector3$b1$Y$value));
    var arg_227_0 = z;
    arg_227_0[2] = JSIL.CloneParameter($thisType.T.get(this), $thisType.T.get(this).$Cast(cameraPosition.Vector3$b1$Z$value - cameraTarget.Vector3$b1$Z$value));
    var arg_43C_2 = z[0] * z[0];
    var arg_4AD_2 = arg_43C_2 + (z[1] * z[1]);
    var mag = JSIL.CloneParameter($thisType.T.get(this), $thisType.T.get(this).$Cast($T02().Sqrt(arg_4AD_2 + (z[2] * z[2]))));
    if (mag > 0) {
      var expr_56B = array = z;
      expr_56B[0] = JSIL.CloneParameter($thisType.T.get(this), $thisType.T.get(this).$Cast(array[0] /= mag));
      var expr_61A = array = z;
      expr_61A[1] = JSIL.CloneParameter($thisType.T.get(this), $thisType.T.get(this).$Cast(array[1] /= mag));
      var expr_6C9 = array = z;
      expr_6C9[2] = JSIL.CloneParameter($thisType.T.get(this), $thisType.T.get(this).$Cast(array[2] /= mag));
    }
    y[0] = JSIL.CloneParameter($thisType.T.get(this), cameraUpVector.Vector3$b1$X$value);
    y[1] = JSIL.CloneParameter($thisType.T.get(this), cameraUpVector.Vector3$b1$Y$value);
    y[2] = JSIL.CloneParameter($thisType.T.get(this), cameraUpVector.Vector3$b1$Z$value);
    var arg_912_0 = x;
    var arg_908_2 = y[1] * z[2];
    arg_912_0[0] = JSIL.CloneParameter($thisType.T.get(this), $thisType.T.get(this).$Cast(arg_908_2 - (y[2] * z[1])));
    var arg_AD0_0 = x;
    var arg_AC6_2 = -y[0] * z[2];
    arg_AD0_0[1] = JSIL.CloneParameter($thisType.T.get(this), $thisType.T.get(this).$Cast(arg_AC6_2 + (y[2] * z[0])));
    var arg_C45_0 = x;
    var arg_C3B_2 = y[0] * z[1];
    arg_C45_0[2] = JSIL.CloneParameter($thisType.T.get(this), $thisType.T.get(this).$Cast(arg_C3B_2 - (y[1] * z[0])));
    var arg_DBA_0 = y;
    var arg_DB0_2 = z[1] * x[2];
    arg_DBA_0[0] = JSIL.CloneParameter($thisType.T.get(this), $thisType.T.get(this).$Cast(arg_DB0_2 - (z[2] * x[1])));
    var arg_F78_0 = y;
    var arg_F6E_2 = -z[0] * x[2];
    arg_F78_0[1] = JSIL.CloneParameter($thisType.T.get(this), $thisType.T.get(this).$Cast(arg_F6E_2 + (z[2] * x[0])));
    var arg_10ED_0 = y;
    var arg_10E3_2 = z[0] * x[1];
    arg_10ED_0[2] = JSIL.CloneParameter($thisType.T.get(this), $thisType.T.get(this).$Cast(arg_10E3_2 - (z[1] * x[0])));
    var arg_1302_2 = x[0] * x[0];
    var arg_1373_2 = arg_1302_2 + (x[1] * x[1]);
    mag = JSIL.CloneParameter($thisType.T.get(this), $thisType.T.get(this).$Cast($T02().Sqrt(arg_1373_2 + (x[2] * x[2]))));
    if (mag > 0) {
      var expr_1431 = array = x;
      expr_1431[0] = JSIL.CloneParameter($thisType.T.get(this), $thisType.T.get(this).$Cast(array[0] /= mag));
      var expr_14E0 = array = x;
      expr_14E0[1] = JSIL.CloneParameter($thisType.T.get(this), $thisType.T.get(this).$Cast(array[1] /= mag));
      var expr_158F = array = x;
      expr_158F[2] = JSIL.CloneParameter($thisType.T.get(this), $thisType.T.get(this).$Cast(array[2] /= mag));
    }
    var arg_184E_2 = y[0] * y[0];
    var arg_18BF_2 = arg_184E_2 + (y[1] * y[1]);
    mag = JSIL.CloneParameter($thisType.T.get(this), $thisType.T.get(this).$Cast($T02().Sqrt(arg_18BF_2 + (y[2] * y[2]))));
    if (mag > 0) {
      var expr_197D = array = y;
      expr_197D[0] = JSIL.CloneParameter($thisType.T.get(this), $thisType.T.get(this).$Cast(array[0] /= mag));
      var expr_1A2C = array = y;
      expr_1A2C[1] = JSIL.CloneParameter($thisType.T.get(this), $thisType.T.get(this).$Cast(array[1] /= mag));
      var expr_1ADB = array = y;
      expr_1ADB[2] = JSIL.CloneParameter($thisType.T.get(this), $thisType.T.get(this).$Cast(array[2] /= mag));
    }
    i.M11 = JSIL.CloneParameter($thisType.T.get(this), x[0]);
    i.M12 = JSIL.CloneParameter($thisType.T.get(this), x[1]);
    i.M13 = JSIL.CloneParameter($thisType.T.get(this), x[2]);
    i.M14 = JSIL.CloneParameter($thisType.T.get(this), $thisType.T.get(this).$Cast(0));
    i.M21 = JSIL.CloneParameter($thisType.T.get(this), y[0]);
    i.M22 = JSIL.CloneParameter($thisType.T.get(this), y[1]);
    i.M23 = JSIL.CloneParameter($thisType.T.get(this), y[2]);
    i.M24 = JSIL.CloneParameter($thisType.T.get(this), $thisType.T.get(this).$Cast(0));
    i.M31 = JSIL.CloneParameter($thisType.T.get(this), z[0]);
    i.M32 = JSIL.CloneParameter($thisType.T.get(this), z[1]);
    i.M33 = JSIL.CloneParameter($thisType.T.get(this), z[2]);
    i.M34 = JSIL.CloneParameter($thisType.T.get(this), $thisType.T.get(this).$Cast(0));
    i.M41 = JSIL.CloneParameter($thisType.T.get(this), $thisType.T.get(this).$Cast(0));
    i.M42 = JSIL.CloneParameter($thisType.T.get(this), $thisType.T.get(this).$Cast(0));
    i.M43 = JSIL.CloneParameter($thisType.T.get(this), $thisType.T.get(this).$Cast(0));
    i.M44 = JSIL.CloneParameter($thisType.T.get(this), $thisType.T.get(this).$Cast(1));
    return i;
  };

  function Matrix$b1_CreateLookAt$0B (/* ref */ cameraPosition, /* ref */ cameraTarget, /* ref */ cameraUpVector, /* ref */ result) {
    throw $S00().Construct();
  };

  function Matrix$b1_CreateOrthographic$0C (width, height, zNearPlane, zFarPlane) {
    throw $S00().Construct();
  };

  function Matrix$b1_CreateOrthographic$0D (width, height, zNearPlane, zFarPlane, /* ref */ result) {
    throw $S00().Construct();
  };

  function Matrix$b1_CreateOrthographicOffCenter$0E (left, right, bottom, top, zNearPlane, zFarPlane) {
    var arg_18C_2 = -(right + left);
    var tx = $thisType.T.get(this).$Cast(arg_18C_2 / (right - left));
    var arg_322_2 = -(top + bottom);
    var ty = $thisType.T.get(this).$Cast(arg_322_2 / (top - bottom));
    var arg_4BC_2 = -(zFarPlane + zNearPlane);
    var tz = $thisType.T.get(this).$Cast(arg_4BC_2 / (zFarPlane - zNearPlane));
    var i = $thisType.Of($thisType.T.get(this)).identity.MemberwiseClone();
    var arg_5C0_2 = 2;
    i.M11 = JSIL.CloneParameter($thisType.T.get(this), $thisType.T.get(this).$Cast(arg_5C0_2 / (right - left)));
    i.M12 = JSIL.CloneParameter($thisType.T.get(this), $thisType.T.get(this).$Cast(0));
    i.M13 = JSIL.CloneParameter($thisType.T.get(this), $thisType.T.get(this).$Cast(0));
    i.M14 = JSIL.CloneParameter($thisType.T.get(this), tx);
    i.M21 = JSIL.CloneParameter($thisType.T.get(this), $thisType.T.get(this).$Cast(0));
    var arg_7B7_2 = 2;
    i.M22 = JSIL.CloneParameter($thisType.T.get(this), $thisType.T.get(this).$Cast(arg_7B7_2 / (top - bottom)));
    i.M23 = JSIL.CloneParameter($thisType.T.get(this), $thisType.T.get(this).$Cast(0));
    i.M24 = JSIL.CloneParameter($thisType.T.get(this), ty);
    i.M31 = JSIL.CloneParameter($thisType.T.get(this), $thisType.T.get(this).$Cast(0));
    i.M32 = JSIL.CloneParameter($thisType.T.get(this), $thisType.T.get(this).$Cast(0));
    var arg_9FA_2 = -2;
    i.M33 = JSIL.CloneParameter($thisType.T.get(this), $thisType.T.get(this).$Cast(arg_9FA_2 / (zFarPlane - zNearPlane)));
    i.M34 = JSIL.CloneParameter($thisType.T.get(this), tz);
    i.M41 = JSIL.CloneParameter($thisType.T.get(this), $thisType.T.get(this).$Cast(0));
    i.M42 = JSIL.CloneParameter($thisType.T.get(this), $thisType.T.get(this).$Cast(0));
    i.M43 = JSIL.CloneParameter($thisType.T.get(this), $thisType.T.get(this).$Cast(0));
    i.M44 = JSIL.CloneParameter($thisType.T.get(this), $thisType.T.get(this).$Cast(1));
    return i;
  };

  function Matrix$b1_CreateOrthographicOffCenter$0F (left, right, bottom, top, zNearPlane, zFarPlane, /* ref */ result) {
    result.set($thisType.Of($thisType.T.get(this)).CreateOrthographicOffCenter(
        left, 
        right, 
        bottom, 
        top, 
        zNearPlane, 
        zFarPlane
      ).MemberwiseClone());
  };

  function Matrix$b1_CreatePerspective$10 (width, height, zNearPlane, zFarPlane) {
    throw $S00().Construct();
  };

  function Matrix$b1_CreatePerspective$11 (width, height, zNearPlane, zFarPlane, /* ref */ result) {
    throw $S00().Construct();
  };

  function Matrix$b1_CreatePerspectiveFieldOfView$12 (fieldOfView, aspectRatio, zNearPlane, zFarPlane) {
    throw $S00().Construct();
  };

  function Matrix$b1_CreatePerspectiveFieldOfView$13 (fieldOfView, aspectRatio, nearPlaneDistance, farPlaneDistance, /* ref */ result) {
    throw $S00().Construct();
  };

  function Matrix$b1_CreatePerspectiveOffCenter$14 (left, right, bottom, top, zNearPlane, zFarPlane) {
    throw $S00().Construct();
  };

  function Matrix$b1_CreatePerspectiveOffCenter$15 (left, right, bottom, top, nearPlaneDistance, farPlaneDistance, /* ref */ result) {
    throw $S00().Construct();
  };

  function Matrix$b1_CreateRotationX$16 (radians) {
    var returnMatrix = $thisType.Of($thisType.T.get(this)).get_Identity().MemberwiseClone();
    returnMatrix.M22 = JSIL.CloneParameter($thisType.T.get(this), $thisType.T.get(this).$Cast($T02().Cos(JSIL.CloneParameter($thisType.T.get(this), radians))));
    returnMatrix.M23 = JSIL.CloneParameter($thisType.T.get(this), $thisType.T.get(this).$Cast($T02().Sin(JSIL.CloneParameter($thisType.T.get(this), radians))));
    returnMatrix.M32 = JSIL.CloneParameter($thisType.T.get(this), $thisType.T.get(this).$Cast(-returnMatrix.M23));
    returnMatrix.M33 = JSIL.CloneParameter($thisType.T.get(this), returnMatrix.M22);
    return returnMatrix;
  };

  function Matrix$b1_CreateRotationX$17 (radians, /* ref */ result) {
    result.set($thisType.Of($thisType.T.get(this)).get_Identity().MemberwiseClone());
    result.get().M22 = JSIL.CloneParameter($thisType.T.get(this), $thisType.T.get(this).$Cast($T02().Cos(JSIL.CloneParameter($thisType.T.get(this), radians))));
    result.get().M23 = JSIL.CloneParameter($thisType.T.get(this), $thisType.T.get(this).$Cast($T02().Sin(JSIL.CloneParameter($thisType.T.get(this), radians))));
    result.get().M32 = JSIL.CloneParameter($thisType.T.get(this), $thisType.T.get(this).$Cast(-result.get().M23));
    result.get().M33 = JSIL.CloneParameter($thisType.T.get(this), result.get().M22);
  };

  function Matrix$b1_CreateRotationY$18 (radians) {
    var returnMatrix = $thisType.Of($thisType.T.get(this)).get_Identity().MemberwiseClone();
    returnMatrix.M11 = JSIL.CloneParameter($thisType.T.get(this), $thisType.T.get(this).$Cast($T02().Cos(JSIL.CloneParameter($thisType.T.get(this), radians))));
    returnMatrix.M13 = JSIL.CloneParameter($thisType.T.get(this), $thisType.T.get(this).$Cast($T02().Sin(JSIL.CloneParameter($thisType.T.get(this), radians))));
    returnMatrix.M31 = JSIL.CloneParameter($thisType.T.get(this), $thisType.T.get(this).$Cast(-returnMatrix.M13));
    returnMatrix.M33 = JSIL.CloneParameter($thisType.T.get(this), returnMatrix.M11);
    return returnMatrix;
  };

  function Matrix$b1_CreateRotationY$19 (radians, /* ref */ result) {
    result.set($thisType.Of($thisType.T.get(this)).get_Identity().MemberwiseClone());
    result.get().M11 = JSIL.CloneParameter($thisType.T.get(this), $thisType.T.get(this).$Cast($T02().Cos(JSIL.CloneParameter($thisType.T.get(this), radians))));
    result.get().M13 = JSIL.CloneParameter($thisType.T.get(this), $thisType.T.get(this).$Cast($T02().Sin(JSIL.CloneParameter($thisType.T.get(this), radians))));
    result.get().M31 = JSIL.CloneParameter($thisType.T.get(this), $thisType.T.get(this).$Cast(-result.get().M13));
    result.get().M33 = JSIL.CloneParameter($thisType.T.get(this), result.get().M11);
  };

  function Matrix$b1_CreateRotationZ$1A (radians) {
    var returnMatrix = $thisType.Of($thisType.T.get(this)).get_Identity().MemberwiseClone();
    returnMatrix.M11 = JSIL.CloneParameter($thisType.T.get(this), $thisType.T.get(this).$Cast($T02().Cos(JSIL.CloneParameter($thisType.T.get(this), radians))));
    returnMatrix.M12 = JSIL.CloneParameter($thisType.T.get(this), $thisType.T.get(this).$Cast($T02().Sin(JSIL.CloneParameter($thisType.T.get(this), radians))));
    returnMatrix.M21 = JSIL.CloneParameter($thisType.T.get(this), $thisType.T.get(this).$Cast(-returnMatrix.M12));
    returnMatrix.M22 = JSIL.CloneParameter($thisType.T.get(this), returnMatrix.M11);
    return returnMatrix;
  };

  function Matrix$b1_CreateRotationZ$1B (radians, /* ref */ result) {
    result.set($thisType.Of($thisType.T.get(this)).get_Identity().MemberwiseClone());
    result.get().M11 = JSIL.CloneParameter($thisType.T.get(this), $thisType.T.get(this).$Cast($T02().Cos(JSIL.CloneParameter($thisType.T.get(this), radians))));
    result.get().M12 = JSIL.CloneParameter($thisType.T.get(this), $thisType.T.get(this).$Cast($T02().Sin(JSIL.CloneParameter($thisType.T.get(this), radians))));
    result.get().M21 = JSIL.CloneParameter($thisType.T.get(this), $thisType.T.get(this).$Cast(-result.get().M12));
    result.get().M22 = JSIL.CloneParameter($thisType.T.get(this), result.get().M11);
  };

  function Matrix$b1_CreateScale$1C (scale) {
    var i = $thisType.Of($thisType.T.get(this)).get_Identity().MemberwiseClone();
    i.M33 = JSIL.CloneParameter($thisType.T.get(this), scale);
    i.M22 = JSIL.CloneParameter($thisType.T.get(this), scale);
    i.M11 = JSIL.CloneParameter($thisType.T.get(this), scale);
    return i;
  };

  function Matrix$b1_CreateScale$1D (scale, /* ref */ result) {
    var $s00 = new JSIL.MethodSignature($asm0A.TypeRef("WWUtils.Math.Matrix`1", [$thisType.T.get(this)]), [$thisType.T.get(this)]);
    result.set($s00.CallStatic($thisType.Of($thisType.T.get(this)), "CreateScale", null, scale).MemberwiseClone());
  };

  function Matrix$b1_CreateScale$1E (xScale, yScale, zScale) {
    var returnMatrix = new ($thisType.Of($thisType.T.get(this))) ();
    returnMatrix.M11 = xScale;
    returnMatrix.M12 = JSIL.CloneParameter($thisType.T.get(this), $thisType.T.get(this).$Cast(0));
    returnMatrix.M13 = JSIL.CloneParameter($thisType.T.get(this), $thisType.T.get(this).$Cast(0));
    returnMatrix.M14 = JSIL.CloneParameter($thisType.T.get(this), $thisType.T.get(this).$Cast(0));
    returnMatrix.M21 = JSIL.CloneParameter($thisType.T.get(this), $thisType.T.get(this).$Cast(0));
    returnMatrix.M22 = yScale;
    returnMatrix.M23 = JSIL.CloneParameter($thisType.T.get(this), $thisType.T.get(this).$Cast(0));
    returnMatrix.M24 = JSIL.CloneParameter($thisType.T.get(this), $thisType.T.get(this).$Cast(0));
    returnMatrix.M31 = JSIL.CloneParameter($thisType.T.get(this), $thisType.T.get(this).$Cast(0));
    returnMatrix.M32 = JSIL.CloneParameter($thisType.T.get(this), $thisType.T.get(this).$Cast(0));
    returnMatrix.M33 = zScale;
    returnMatrix.M34 = JSIL.CloneParameter($thisType.T.get(this), $thisType.T.get(this).$Cast(0));
    returnMatrix.M41 = JSIL.CloneParameter($thisType.T.get(this), $thisType.T.get(this).$Cast(0));
    returnMatrix.M42 = JSIL.CloneParameter($thisType.T.get(this), $thisType.T.get(this).$Cast(0));
    returnMatrix.M43 = JSIL.CloneParameter($thisType.T.get(this), $thisType.T.get(this).$Cast(0));
    returnMatrix.M44 = JSIL.CloneParameter($thisType.T.get(this), $thisType.T.get(this).$Cast(1));
    return returnMatrix;
  };

  function Matrix$b1_CreateScale$1F (xScale, yScale, zScale, /* ref */ result) {
    result.set($thisType.Of($thisType.T.get(this)).CreateScale(xScale, yScale, zScale).MemberwiseClone());
  };

  function Matrix$b1_CreateScale$20 (scales) {
    return $thisType.Of($thisType.T.get(this)).CreateScale(JSIL.CloneParameter($thisType.T.get(this), scales.Vector3$b1$X$value), JSIL.CloneParameter($thisType.T.get(this), scales.Vector3$b1$Y$value), JSIL.CloneParameter($thisType.T.get(this), scales.Vector3$b1$Z$value));
  };

  function Matrix$b1_CreateScale$21 (/* ref */ scales, /* ref */ result) {
    result.set($thisType.Of($thisType.T.get(this)).CreateScale(JSIL.CloneParameter($thisType.T.get(this), scales.get().Vector3$b1$X$value), JSIL.CloneParameter($thisType.T.get(this), scales.get().Vector3$b1$Y$value), JSIL.CloneParameter($thisType.T.get(this), scales.get().Vector3$b1$Z$value)).MemberwiseClone());
  };

  function Matrix$b1_CreateTranslation$22 (xPosition, yPosition, zPosition) {
    var i = $thisType.Of($thisType.T.get(this)).get_Identity().MemberwiseClone();
    i.M41 = xPosition;
    i.M42 = yPosition;
    i.M43 = zPosition;
    return i;
  };

  function Matrix$b1_CreateTranslation$23 (/* ref */ position, /* ref */ result) {
    result.set($thisType.Of($thisType.T.get(this)).CreateTranslation(JSIL.CloneParameter($thisType.T.get(this), position.get().Vector3$b1$X$value), JSIL.CloneParameter($thisType.T.get(this), position.get().Vector3$b1$Y$value), JSIL.CloneParameter($thisType.T.get(this), position.get().Vector3$b1$Z$value)).MemberwiseClone());
  };

  function Matrix$b1_CreateTranslation$24 (position) {
    return $thisType.Of($thisType.T.get(this)).CreateTranslation(JSIL.CloneParameter($thisType.T.get(this), position.Vector3$b1$X$value), JSIL.CloneParameter($thisType.T.get(this), position.Vector3$b1$Y$value), JSIL.CloneParameter($thisType.T.get(this), position.Vector3$b1$Z$value));
  };

  function Matrix$b1_CreateTranslation$25 (xPosition, yPosition, zPosition, /* ref */ result) {
    result.set($thisType.Of($thisType.T.get(this)).CreateTranslation(xPosition, yPosition, zPosition).MemberwiseClone());
  };

  function Matrix$b1_Determinant () {
    throw $S00().Construct();
  };

  function Matrix$b1_Divide$26 (matrix1, matrix2) {
    throw $S00().Construct();
  };

  function Matrix$b1_Divide$27 (/* ref */ matrix1, /* ref */ matrix2, /* ref */ result) {
    throw $S00().Construct();
  };

  function Matrix$b1_Divide$28 (matrix1, divider) {
    throw $S00().Construct();
  };

  function Matrix$b1_Divide$29 (/* ref */ matrix1, divider, /* ref */ result) {
    throw $S00().Construct();
  };

  function Matrix$b1_Equals$2A (other) {
    throw $S00().Construct();
  };

  function Matrix$b1_Object_Equals (obj) {
    throw $S00().Construct();
  };

  function Matrix$b1_findDeterminants (/* ref */ matrix, /* ref */ major, /* ref */ minor1, /* ref */ minor2, /* ref */ minor3, /* ref */ minor4, /* ref */ minor5, /* ref */ minor6, /* ref */ minor7, /* ref */ minor8, /* ref */ minor9, /* ref */ minor10, /* ref */ minor11, /* ref */ minor12) {
    var arg_9D_0 = +JSIL.CloneParameter($thisType.T.get(this), $T03().$Cast(matrix.get().M11));
    var arg_13B_0 = arg_9D_0 * $T03().$Cast(matrix.get().M22);
    var arg_13A_0 = +JSIL.CloneParameter($thisType.T.get(this), $T03().$Cast(matrix.get().M12));
    var det = arg_13B_0 - (arg_13A_0 * $T03().$Cast(matrix.get().M21));
    var arg_1D9_0 = +JSIL.CloneParameter($thisType.T.get(this), $T03().$Cast(matrix.get().M11));
    var arg_277_0 = arg_1D9_0 * $T03().$Cast(matrix.get().M23);
    var arg_276_0 = +JSIL.CloneParameter($thisType.T.get(this), $T03().$Cast(matrix.get().M13));
    var det2 = arg_277_0 - (arg_276_0 * $T03().$Cast(matrix.get().M21));
    var arg_315_0 = +JSIL.CloneParameter($thisType.T.get(this), $T03().$Cast(matrix.get().M11));
    var arg_3B3_0 = arg_315_0 * $T03().$Cast(matrix.get().M24);
    var arg_3B2_0 = +JSIL.CloneParameter($thisType.T.get(this), $T03().$Cast(matrix.get().M14));
    var det3 = arg_3B3_0 - (arg_3B2_0 * $T03().$Cast(matrix.get().M21));
    var arg_451_0 = +JSIL.CloneParameter($thisType.T.get(this), $T03().$Cast(matrix.get().M12));
    var arg_4EF_0 = arg_451_0 * $T03().$Cast(matrix.get().M23);
    var arg_4EE_0 = +JSIL.CloneParameter($thisType.T.get(this), $T03().$Cast(matrix.get().M13));
    var det4 = arg_4EF_0 - (arg_4EE_0 * $T03().$Cast(matrix.get().M22));
    var arg_58D_0 = +JSIL.CloneParameter($thisType.T.get(this), $T03().$Cast(matrix.get().M12));
    var arg_62B_0 = arg_58D_0 * $T03().$Cast(matrix.get().M24);
    var arg_62A_0 = +JSIL.CloneParameter($thisType.T.get(this), $T03().$Cast(matrix.get().M14));
    var det5 = arg_62B_0 - (arg_62A_0 * $T03().$Cast(matrix.get().M22));
    var arg_6CA_0 = +JSIL.CloneParameter($thisType.T.get(this), $T03().$Cast(matrix.get().M13));
    var arg_768_0 = arg_6CA_0 * $T03().$Cast(matrix.get().M24);
    var arg_767_0 = +JSIL.CloneParameter($thisType.T.get(this), $T03().$Cast(matrix.get().M14));
    var det6 = arg_768_0 - (arg_767_0 * $T03().$Cast(matrix.get().M23));
    var arg_807_0 = +JSIL.CloneParameter($thisType.T.get(this), $T03().$Cast(matrix.get().M31));
    var arg_8A5_0 = arg_807_0 * $T03().$Cast(matrix.get().M42);
    var arg_8A4_0 = +JSIL.CloneParameter($thisType.T.get(this), $T03().$Cast(matrix.get().M32));
    var det7 = arg_8A5_0 - (arg_8A4_0 * $T03().$Cast(matrix.get().M41));
    var arg_944_0 = +JSIL.CloneParameter($thisType.T.get(this), $T03().$Cast(matrix.get().M31));
    var arg_9E2_0 = arg_944_0 * $T03().$Cast(matrix.get().M43);
    var arg_9E1_0 = +JSIL.CloneParameter($thisType.T.get(this), $T03().$Cast(matrix.get().M33));
    var det8 = arg_9E2_0 - (arg_9E1_0 * $T03().$Cast(matrix.get().M41));
    var arg_A81_0 = +JSIL.CloneParameter($thisType.T.get(this), $T03().$Cast(matrix.get().M31));
    var arg_B1F_0 = arg_A81_0 * $T03().$Cast(matrix.get().M44);
    var arg_B1E_0 = +JSIL.CloneParameter($thisType.T.get(this), $T03().$Cast(matrix.get().M34));
    var det9 = arg_B1F_0 - (arg_B1E_0 * $T03().$Cast(matrix.get().M41));
    var arg_BBE_0 = +JSIL.CloneParameter($thisType.T.get(this), $T03().$Cast(matrix.get().M32));
    var arg_C5C_0 = arg_BBE_0 * $T03().$Cast(matrix.get().M43);
    var arg_C5B_0 = +JSIL.CloneParameter($thisType.T.get(this), $T03().$Cast(matrix.get().M33));
    var det10 = arg_C5C_0 - (arg_C5B_0 * $T03().$Cast(matrix.get().M42));
    var arg_CFB_0 = +JSIL.CloneParameter($thisType.T.get(this), $T03().$Cast(matrix.get().M32));
    var arg_D99_0 = arg_CFB_0 * $T03().$Cast(matrix.get().M44);
    var arg_D98_0 = +JSIL.CloneParameter($thisType.T.get(this), $T03().$Cast(matrix.get().M34));
    var det11 = arg_D99_0 - (arg_D98_0 * $T03().$Cast(matrix.get().M42));
    var arg_E38_0 = +JSIL.CloneParameter($thisType.T.get(this), $T03().$Cast(matrix.get().M33));
    var arg_ED6_0 = arg_E38_0 * $T03().$Cast(matrix.get().M44);
    var arg_ED5_0 = +JSIL.CloneParameter($thisType.T.get(this), $T03().$Cast(matrix.get().M34));
    var det12 = arg_ED6_0 - (arg_ED5_0 * $T03().$Cast(matrix.get().M43));
    major.set(JSIL.CloneParameter($thisType.T.get(this), $thisType.T.get(this).$Cast(((((((det * det12) - (det2 * det11)) + (det3 * det10)) + (det4 * det9)) - (det5 * det8)) + (det6 * det7)))));
    minor1.set(JSIL.CloneParameter($thisType.T.get(this), $thisType.T.get(this).$Cast(det)));
    minor2.set(JSIL.CloneParameter($thisType.T.get(this), $thisType.T.get(this).$Cast(det2)));
    minor3.set(JSIL.CloneParameter($thisType.T.get(this), $thisType.T.get(this).$Cast(det3)));
    minor4.set(JSIL.CloneParameter($thisType.T.get(this), $thisType.T.get(this).$Cast(det4)));
    minor5.set(JSIL.CloneParameter($thisType.T.get(this), $thisType.T.get(this).$Cast(det5)));
    minor6.set(JSIL.CloneParameter($thisType.T.get(this), $thisType.T.get(this).$Cast(det6)));
    minor7.set(JSIL.CloneParameter($thisType.T.get(this), $thisType.T.get(this).$Cast(det7)));
    minor8.set(JSIL.CloneParameter($thisType.T.get(this), $thisType.T.get(this).$Cast(det8)));
    minor9.set(JSIL.CloneParameter($thisType.T.get(this), $thisType.T.get(this).$Cast(det9)));
    minor10.set(JSIL.CloneParameter($thisType.T.get(this), $thisType.T.get(this).$Cast(det10)));
    minor11.set(JSIL.CloneParameter($thisType.T.get(this), $thisType.T.get(this).$Cast(det11)));
    minor12.set(JSIL.CloneParameter($thisType.T.get(this), $thisType.T.get(this).$Cast(det12)));
  };

  function Matrix$b1_get_Backward () {
    return new ($asm0A.WWUtils.Math.Vector3$b1.Of($thisType.T.get(this))) (JSIL.CloneParameter($thisType.T.get(this), this.M31), JSIL.CloneParameter($thisType.T.get(this), this.M32), JSIL.CloneParameter($thisType.T.get(this), this.M33));
  };

  function Matrix$b1_get_Identity () {
    return $thisType.Of($thisType.T.get(this)).identity;
  };

  function Matrix$b1_get_Right () {
    return new ($asm0A.WWUtils.Math.Vector3$b1.Of($thisType.T.get(this))) (JSIL.CloneParameter($thisType.T.get(this), this.M11), JSIL.CloneParameter($thisType.T.get(this), this.M12), JSIL.CloneParameter($thisType.T.get(this), this.M13));
  };

  function Matrix$b1_get_Translation () {
    return new ($asm0A.WWUtils.Math.Vector3$b1.Of($thisType.T.get(this))) (JSIL.CloneParameter($thisType.T.get(this), this.M41), JSIL.CloneParameter($thisType.T.get(this), this.M42), JSIL.CloneParameter($thisType.T.get(this), this.M43));
  };

  function Matrix$b1_get_Up () {
    return new ($asm0A.WWUtils.Math.Vector3$b1.Of($thisType.T.get(this))) (JSIL.CloneParameter($thisType.T.get(this), this.M21), JSIL.CloneParameter($thisType.T.get(this), this.M22), JSIL.CloneParameter($thisType.T.get(this), this.M23));
  };

  function Matrix$b1_GetHashCode () {
    throw $S00().Construct();
  };

  function Matrix$b1_Invert$2B ($matrix) {
    var matrix = new JSIL.BoxedVariable($matrix);
    $thisType.Of($thisType.T.get(this)).Invert(/* ref */ matrix, /* ref */ matrix);
    return matrix.get();
  };

  function Matrix$b1_Invert$2C (/* ref */ matrix, /* ref */ result) {
    var detMatrix = new JSIL.BoxedVariable((
        $thisType.T.get(this).IsValueType
           ? JSIL.CreateInstanceOfType($thisType.T.get(this))
           : null)
    );
    var det = new JSIL.BoxedVariable((
        $thisType.T.get(this).IsValueType
           ? JSIL.CreateInstanceOfType($thisType.T.get(this))
           : null)
    );
    var det2 = new JSIL.BoxedVariable((
        $thisType.T.get(this).IsValueType
           ? JSIL.CreateInstanceOfType($thisType.T.get(this))
           : null)
    );
    var det3 = new JSIL.BoxedVariable((
        $thisType.T.get(this).IsValueType
           ? JSIL.CreateInstanceOfType($thisType.T.get(this))
           : null)
    );
    var det4 = new JSIL.BoxedVariable((
        $thisType.T.get(this).IsValueType
           ? JSIL.CreateInstanceOfType($thisType.T.get(this))
           : null)
    );
    var det5 = new JSIL.BoxedVariable((
        $thisType.T.get(this).IsValueType
           ? JSIL.CreateInstanceOfType($thisType.T.get(this))
           : null)
    );
    var det6 = new JSIL.BoxedVariable((
        $thisType.T.get(this).IsValueType
           ? JSIL.CreateInstanceOfType($thisType.T.get(this))
           : null)
    );
    var det7 = new JSIL.BoxedVariable((
        $thisType.T.get(this).IsValueType
           ? JSIL.CreateInstanceOfType($thisType.T.get(this))
           : null)
    );
    var det8 = new JSIL.BoxedVariable((
        $thisType.T.get(this).IsValueType
           ? JSIL.CreateInstanceOfType($thisType.T.get(this))
           : null)
    );
    var det9 = new JSIL.BoxedVariable((
        $thisType.T.get(this).IsValueType
           ? JSIL.CreateInstanceOfType($thisType.T.get(this))
           : null)
    );
    var det10 = new JSIL.BoxedVariable((
        $thisType.T.get(this).IsValueType
           ? JSIL.CreateInstanceOfType($thisType.T.get(this))
           : null)
    );
    var det11 = new JSIL.BoxedVariable((
        $thisType.T.get(this).IsValueType
           ? JSIL.CreateInstanceOfType($thisType.T.get(this))
           : null)
    );
    var det12 = new JSIL.BoxedVariable((
        $thisType.T.get(this).IsValueType
           ? JSIL.CreateInstanceOfType($thisType.T.get(this))
           : null)
    );
    var ret = new ($thisType.Of($thisType.T.get(this))) ();
    $thisType.Of($thisType.T.get(this)).findDeterminants(
      /* ref */ matrix, 
      /* ref */ detMatrix, 
      /* ref */ det, 
      /* ref */ det2, 
      /* ref */ det3, 
      /* ref */ det4, 
      /* ref */ det5, 
      /* ref */ det6, 
      /* ref */ det7, 
      /* ref */ det8, 
      /* ref */ det9, 
      /* ref */ det10, 
      /* ref */ det11, 
      /* ref */ det12
    );
    var invDetMatrix = JSIL.CloneParameter($thisType.T.get(this), $thisType.T.get(this).$Cast(1 / detMatrix.get()));
    var arg_2B2_2 = matrix.get().M22 * det12.get();
    var arg_318_2 = arg_2B2_2 - (matrix.get().M23 * det11.get());
    ret.M11 = JSIL.CloneParameter($thisType.T.get(this), $thisType.T.get(this).$Cast((arg_318_2 + (matrix.get().M24 * det10.get())) * invDetMatrix));
    var arg_56A_2 = -matrix.get().M12 * det12.get();
    var arg_5D0_2 = arg_56A_2 + (matrix.get().M13 * det11.get());
    ret.M12 = JSIL.CloneParameter($thisType.T.get(this), $thisType.T.get(this).$Cast((arg_5D0_2 - (matrix.get().M14 * det10.get())) * invDetMatrix));
    var arg_7D8_2 = matrix.get().M42 * det6.get();
    var arg_83D_2 = arg_7D8_2 - (matrix.get().M43 * det5.get());
    ret.M13 = JSIL.CloneParameter($thisType.T.get(this), $thisType.T.get(this).$Cast((arg_83D_2 + (matrix.get().M44 * det4.get())) * invDetMatrix));
    var arg_A8F_2 = -matrix.get().M32 * det6.get();
    var arg_AF4_2 = arg_A8F_2 + (matrix.get().M33 * det5.get());
    ret.M14 = JSIL.CloneParameter($thisType.T.get(this), $thisType.T.get(this).$Cast((arg_AF4_2 - (matrix.get().M34 * det4.get())) * invDetMatrix));
    var arg_D46_2 = -matrix.get().M21 * det12.get();
    var arg_DAC_2 = arg_D46_2 + (matrix.get().M23 * det9.get());
    ret.M21 = JSIL.CloneParameter($thisType.T.get(this), $thisType.T.get(this).$Cast((arg_DAC_2 - (matrix.get().M24 * det8.get())) * invDetMatrix));
    var arg_FB4_2 = matrix.get().M11 * det12.get();
    var arg_101A_2 = arg_FB4_2 - (matrix.get().M13 * det9.get());
    ret.M22 = JSIL.CloneParameter($thisType.T.get(this), $thisType.T.get(this).$Cast((arg_101A_2 + (matrix.get().M14 * det8.get())) * invDetMatrix));
    var arg_126B_2 = -matrix.get().M41 * det6.get();
    var arg_12D0_2 = arg_126B_2 + (matrix.get().M43 * det3.get());
    ret.M23 = JSIL.CloneParameter($thisType.T.get(this), $thisType.T.get(this).$Cast((arg_12D0_2 - (matrix.get().M44 * det2.get())) * invDetMatrix));
    var arg_14D7_2 = matrix.get().M31 * det6.get();
    var arg_153C_2 = arg_14D7_2 - (matrix.get().M33 * det3.get());
    ret.M24 = JSIL.CloneParameter($thisType.T.get(this), $thisType.T.get(this).$Cast((arg_153C_2 + (matrix.get().M34 * det2.get())) * invDetMatrix));
    var arg_1744_2 = matrix.get().M21 * det11.get();
    var arg_17AA_2 = arg_1744_2 - (matrix.get().M22 * det9.get());
    ret.M31 = JSIL.CloneParameter($thisType.T.get(this), $thisType.T.get(this).$Cast((arg_17AA_2 + (matrix.get().M24 * det7.get())) * invDetMatrix));
    var arg_19FC_2 = -matrix.get().M11 * det11.get();
    var arg_1A62_2 = arg_19FC_2 + (matrix.get().M12 * det9.get());
    ret.M32 = JSIL.CloneParameter($thisType.T.get(this), $thisType.T.get(this).$Cast((arg_1A62_2 - (matrix.get().M14 * det7.get())) * invDetMatrix));
    var arg_1C69_2 = matrix.get().M41 * det5.get();
    var arg_1CCE_2 = arg_1C69_2 - (matrix.get().M42 * det3.get());
    ret.M33 = JSIL.CloneParameter($thisType.T.get(this), $thisType.T.get(this).$Cast((arg_1CCE_2 + (matrix.get().M44 * det.get())) * invDetMatrix));
    var arg_1F1F_2 = -matrix.get().M31 * det5.get();
    var arg_1F84_2 = arg_1F1F_2 + (matrix.get().M32 * det3.get());
    ret.M34 = JSIL.CloneParameter($thisType.T.get(this), $thisType.T.get(this).$Cast((arg_1F84_2 - (matrix.get().M34 * det.get())) * invDetMatrix));
    var arg_21D6_2 = -matrix.get().M21 * det10.get();
    var arg_223C_2 = arg_21D6_2 + (matrix.get().M22 * det8.get());
    ret.M41 = JSIL.CloneParameter($thisType.T.get(this), $thisType.T.get(this).$Cast((arg_223C_2 - (matrix.get().M23 * det7.get())) * invDetMatrix));
    var arg_2444_2 = matrix.get().M11 * det10.get();
    var arg_24AA_2 = arg_2444_2 - (matrix.get().M12 * det8.get());
    ret.M42 = JSIL.CloneParameter($thisType.T.get(this), $thisType.T.get(this).$Cast((arg_24AA_2 + (matrix.get().M13 * det7.get())) * invDetMatrix));
    var arg_26FA_2 = -matrix.get().M41 * det4.get();
    var arg_275F_2 = arg_26FA_2 + (matrix.get().M42 * det2.get());
    ret.M43 = JSIL.CloneParameter($thisType.T.get(this), $thisType.T.get(this).$Cast((arg_275F_2 - (matrix.get().M43 * det.get())) * invDetMatrix));
    var arg_2965_2 = matrix.get().M31 * det4.get();
    var arg_29CA_2 = arg_2965_2 - (matrix.get().M32 * det2.get());
    ret.M44 = JSIL.CloneParameter($thisType.T.get(this), $thisType.T.get(this).$Cast((arg_29CA_2 + (matrix.get().M33 * det.get())) * invDetMatrix));
    result.set(ret.MemberwiseClone());
  };

  function Matrix$b1_Lerp$2D (matrix1, matrix2, amount) {
    throw $S00().Construct();
  };

  function Matrix$b1_Lerp$2E (/* ref */ matrix1, /* ref */ matrix2, amount, /* ref */ result) {
    throw $S00().Construct();
  };

  function Matrix$b1_Multiply$2F ($matrix1, $matrix2) {
    var $s00 = new JSIL.MethodSignature(null, [
        $jsilcore.TypeRef("JSIL.Reference", [$asm0A.TypeRef("WWUtils.Math.Matrix`1", [$thisType.T.get(this)])]), $jsilcore.TypeRef("JSIL.Reference", [$asm0A.TypeRef("WWUtils.Math.Matrix`1", [$thisType.T.get(this)])]), 
        $jsilcore.TypeRef("JSIL.Reference", [$asm0A.TypeRef("WWUtils.Math.Matrix`1", [$thisType.T.get(this)])])
      ]);
    var matrix2 = new JSIL.BoxedVariable($matrix2);
    var matrix1 = new JSIL.BoxedVariable($matrix1);
    var ret = new JSIL.BoxedVariable(new ($thisType.Of($thisType.T.get(this))) ());
    $s00.CallStatic($thisType.Of($thisType.T.get(this)), "Multiply", null, /* ref */ matrix1, /* ref */ matrix2, /* ref */ ret);
    return ret.get();
  };

  function Matrix$b1_Multiply$30 (/* ref */ matrix1, /* ref */ matrix2, /* ref */ result) {
    var arg_1F3_2 = matrix1.get().M11 * matrix2.get().M11;
    var arg_25D_2 = arg_1F3_2 + (matrix1.get().M12 * matrix2.get().M21);
    var arg_2C7_2 = arg_25D_2 + (matrix1.get().M13 * matrix2.get().M31);
    result.get().M11 = JSIL.CloneParameter($thisType.T.get(this), $thisType.T.get(this).$Cast(arg_2C7_2 + (matrix1.get().M14 * matrix2.get().M41)));
    var arg_4C8_2 = matrix1.get().M11 * matrix2.get().M12;
    var arg_532_2 = arg_4C8_2 + (matrix1.get().M12 * matrix2.get().M22);
    var arg_59C_2 = arg_532_2 + (matrix1.get().M13 * matrix2.get().M32);
    result.get().M12 = JSIL.CloneParameter($thisType.T.get(this), $thisType.T.get(this).$Cast(arg_59C_2 + (matrix1.get().M14 * matrix2.get().M42)));
    var arg_79D_2 = matrix1.get().M11 * matrix2.get().M13;
    var arg_807_2 = arg_79D_2 + (matrix1.get().M12 * matrix2.get().M23);
    var arg_871_2 = arg_807_2 + (matrix1.get().M13 * matrix2.get().M33);
    result.get().M13 = JSIL.CloneParameter($thisType.T.get(this), $thisType.T.get(this).$Cast(arg_871_2 + (matrix1.get().M14 * matrix2.get().M43)));
    var arg_A72_2 = matrix1.get().M11 * matrix2.get().M14;
    var arg_ADC_2 = arg_A72_2 + (matrix1.get().M12 * matrix2.get().M24);
    var arg_B46_2 = arg_ADC_2 + (matrix1.get().M13 * matrix2.get().M34);
    result.get().M14 = JSIL.CloneParameter($thisType.T.get(this), $thisType.T.get(this).$Cast(arg_B46_2 + (matrix1.get().M14 * matrix2.get().M44)));
    var arg_D47_2 = matrix1.get().M21 * matrix2.get().M11;
    var arg_DB1_2 = arg_D47_2 + (matrix1.get().M22 * matrix2.get().M21);
    var arg_E1B_2 = arg_DB1_2 + (matrix1.get().M23 * matrix2.get().M31);
    result.get().M21 = JSIL.CloneParameter($thisType.T.get(this), $thisType.T.get(this).$Cast(arg_E1B_2 + (matrix1.get().M24 * matrix2.get().M41)));
    var arg_101C_2 = matrix1.get().M21 * matrix2.get().M12;
    var arg_1086_2 = arg_101C_2 + (matrix1.get().M22 * matrix2.get().M22);
    var arg_10F0_2 = arg_1086_2 + (matrix1.get().M23 * matrix2.get().M32);
    result.get().M22 = JSIL.CloneParameter($thisType.T.get(this), $thisType.T.get(this).$Cast(arg_10F0_2 + (matrix1.get().M24 * matrix2.get().M42)));
    var arg_12F1_2 = matrix1.get().M21 * matrix2.get().M13;
    var arg_135B_2 = arg_12F1_2 + (matrix1.get().M22 * matrix2.get().M23);
    var arg_13C5_2 = arg_135B_2 + (matrix1.get().M23 * matrix2.get().M33);
    result.get().M23 = JSIL.CloneParameter($thisType.T.get(this), $thisType.T.get(this).$Cast(arg_13C5_2 + (matrix1.get().M24 * matrix2.get().M43)));
    var arg_15C6_2 = matrix1.get().M21 * matrix2.get().M14;
    var arg_1630_2 = arg_15C6_2 + (matrix1.get().M22 * matrix2.get().M24);
    var arg_169A_2 = arg_1630_2 + (matrix1.get().M23 * matrix2.get().M34);
    result.get().M24 = JSIL.CloneParameter($thisType.T.get(this), $thisType.T.get(this).$Cast(arg_169A_2 + (matrix1.get().M24 * matrix2.get().M44)));
    var arg_189B_2 = matrix1.get().M31 * matrix2.get().M11;
    var arg_1905_2 = arg_189B_2 + (matrix1.get().M32 * matrix2.get().M21);
    var arg_196F_2 = arg_1905_2 + (matrix1.get().M33 * matrix2.get().M31);
    result.get().M31 = JSIL.CloneParameter($thisType.T.get(this), $thisType.T.get(this).$Cast(arg_196F_2 + (matrix1.get().M34 * matrix2.get().M41)));
    var arg_1B70_2 = matrix1.get().M31 * matrix2.get().M12;
    var arg_1BDA_2 = arg_1B70_2 + (matrix1.get().M32 * matrix2.get().M22);
    var arg_1C44_2 = arg_1BDA_2 + (matrix1.get().M33 * matrix2.get().M32);
    result.get().M32 = JSIL.CloneParameter($thisType.T.get(this), $thisType.T.get(this).$Cast(arg_1C44_2 + (matrix1.get().M34 * matrix2.get().M42)));
    var arg_1E45_2 = matrix1.get().M31 * matrix2.get().M13;
    var arg_1EAF_2 = arg_1E45_2 + (matrix1.get().M32 * matrix2.get().M23);
    var arg_1F19_2 = arg_1EAF_2 + (matrix1.get().M33 * matrix2.get().M33);
    result.get().M33 = JSIL.CloneParameter($thisType.T.get(this), $thisType.T.get(this).$Cast(arg_1F19_2 + (matrix1.get().M34 * matrix2.get().M43)));
    var arg_211A_2 = matrix1.get().M31 * matrix2.get().M14;
    var arg_2184_2 = arg_211A_2 + (matrix1.get().M32 * matrix2.get().M24);
    var arg_21EE_2 = arg_2184_2 + (matrix1.get().M33 * matrix2.get().M34);
    result.get().M34 = JSIL.CloneParameter($thisType.T.get(this), $thisType.T.get(this).$Cast(arg_21EE_2 + (matrix1.get().M34 * matrix2.get().M44)));
    var arg_23EF_2 = matrix1.get().M41 * matrix2.get().M11;
    var arg_2459_2 = arg_23EF_2 + (matrix1.get().M42 * matrix2.get().M21);
    var arg_24C3_2 = arg_2459_2 + (matrix1.get().M43 * matrix2.get().M31);
    result.get().M41 = JSIL.CloneParameter($thisType.T.get(this), $thisType.T.get(this).$Cast(arg_24C3_2 + (matrix1.get().M44 * matrix2.get().M41)));
    var arg_26C4_2 = matrix1.get().M41 * matrix2.get().M12;
    var arg_272E_2 = arg_26C4_2 + (matrix1.get().M42 * matrix2.get().M22);
    var arg_2798_2 = arg_272E_2 + (matrix1.get().M43 * matrix2.get().M32);
    result.get().M42 = JSIL.CloneParameter($thisType.T.get(this), $thisType.T.get(this).$Cast(arg_2798_2 + (matrix1.get().M44 * matrix2.get().M42)));
    var arg_2999_2 = matrix1.get().M41 * matrix2.get().M13;
    var arg_2A03_2 = arg_2999_2 + (matrix1.get().M42 * matrix2.get().M23);
    var arg_2A6D_2 = arg_2A03_2 + (matrix1.get().M43 * matrix2.get().M33);
    result.get().M43 = JSIL.CloneParameter($thisType.T.get(this), $thisType.T.get(this).$Cast(arg_2A6D_2 + (matrix1.get().M44 * matrix2.get().M43)));
    var arg_2C6E_2 = matrix1.get().M41 * matrix2.get().M14;
    var arg_2CD8_2 = arg_2C6E_2 + (matrix1.get().M42 * matrix2.get().M24);
    var arg_2D42_2 = arg_2CD8_2 + (matrix1.get().M43 * matrix2.get().M34);
    result.get().M44 = JSIL.CloneParameter($thisType.T.get(this), $thisType.T.get(this).$Cast(arg_2D42_2 + (matrix1.get().M44 * matrix2.get().M44)));
  };

  function Matrix$b1_Multiply$31 (matrix1, factor) {
    matrix1.M11 = JSIL.CloneParameter($thisType.T.get(this), $thisType.T.get(this).$Cast(matrix1.M11 *= factor));
    matrix1.M12 = JSIL.CloneParameter($thisType.T.get(this), $thisType.T.get(this).$Cast(matrix1.M12 *= factor));
    matrix1.M13 = JSIL.CloneParameter($thisType.T.get(this), $thisType.T.get(this).$Cast(matrix1.M13 *= factor));
    matrix1.M14 = JSIL.CloneParameter($thisType.T.get(this), $thisType.T.get(this).$Cast(matrix1.M14 *= factor));
    matrix1.M21 = JSIL.CloneParameter($thisType.T.get(this), $thisType.T.get(this).$Cast(matrix1.M21 *= factor));
    matrix1.M22 = JSIL.CloneParameter($thisType.T.get(this), $thisType.T.get(this).$Cast(matrix1.M22 *= factor));
    matrix1.M23 = JSIL.CloneParameter($thisType.T.get(this), $thisType.T.get(this).$Cast(matrix1.M23 *= factor));
    matrix1.M24 = JSIL.CloneParameter($thisType.T.get(this), $thisType.T.get(this).$Cast(matrix1.M24 *= factor));
    matrix1.M31 = JSIL.CloneParameter($thisType.T.get(this), $thisType.T.get(this).$Cast(matrix1.M31 *= factor));
    matrix1.M32 = JSIL.CloneParameter($thisType.T.get(this), $thisType.T.get(this).$Cast(matrix1.M32 *= factor));
    matrix1.M33 = JSIL.CloneParameter($thisType.T.get(this), $thisType.T.get(this).$Cast(matrix1.M33 *= factor));
    matrix1.M34 = JSIL.CloneParameter($thisType.T.get(this), $thisType.T.get(this).$Cast(matrix1.M34 *= factor));
    matrix1.M41 = JSIL.CloneParameter($thisType.T.get(this), $thisType.T.get(this).$Cast(matrix1.M41 *= factor));
    matrix1.M42 = JSIL.CloneParameter($thisType.T.get(this), $thisType.T.get(this).$Cast(matrix1.M42 *= factor));
    matrix1.M43 = JSIL.CloneParameter($thisType.T.get(this), $thisType.T.get(this).$Cast(matrix1.M43 *= factor));
    matrix1.M44 = JSIL.CloneParameter($thisType.T.get(this), $thisType.T.get(this).$Cast(matrix1.M44 *= factor));
    return matrix1;
  };

  function Matrix$b1_Multiply$32 (/* ref */ matrix1, factor, /* ref */ result) {
    result.get().M11 = JSIL.CloneParameter($thisType.T.get(this), $thisType.T.get(this).$Cast(matrix1.get().M11 * factor));
    result.get().M12 = JSIL.CloneParameter($thisType.T.get(this), $thisType.T.get(this).$Cast(matrix1.get().M12 * factor));
    result.get().M13 = JSIL.CloneParameter($thisType.T.get(this), $thisType.T.get(this).$Cast(matrix1.get().M13 * factor));
    result.get().M14 = JSIL.CloneParameter($thisType.T.get(this), $thisType.T.get(this).$Cast(matrix1.get().M14 * factor));
    result.get().M21 = JSIL.CloneParameter($thisType.T.get(this), $thisType.T.get(this).$Cast(matrix1.get().M21 * factor));
    result.get().M22 = JSIL.CloneParameter($thisType.T.get(this), $thisType.T.get(this).$Cast(matrix1.get().M22 * factor));
    result.get().M23 = JSIL.CloneParameter($thisType.T.get(this), $thisType.T.get(this).$Cast(matrix1.get().M23 * factor));
    result.get().M24 = JSIL.CloneParameter($thisType.T.get(this), $thisType.T.get(this).$Cast(matrix1.get().M24 * factor));
    result.get().M31 = JSIL.CloneParameter($thisType.T.get(this), $thisType.T.get(this).$Cast(matrix1.get().M31 * factor));
    result.get().M32 = JSIL.CloneParameter($thisType.T.get(this), $thisType.T.get(this).$Cast(matrix1.get().M32 * factor));
    result.get().M33 = JSIL.CloneParameter($thisType.T.get(this), $thisType.T.get(this).$Cast(matrix1.get().M33 * factor));
    result.get().M34 = JSIL.CloneParameter($thisType.T.get(this), $thisType.T.get(this).$Cast(matrix1.get().M34 * factor));
    result.get().M41 = JSIL.CloneParameter($thisType.T.get(this), $thisType.T.get(this).$Cast(matrix1.get().M41 * factor));
    result.get().M42 = JSIL.CloneParameter($thisType.T.get(this), $thisType.T.get(this).$Cast(matrix1.get().M42 * factor));
    result.get().M43 = JSIL.CloneParameter($thisType.T.get(this), $thisType.T.get(this).$Cast(matrix1.get().M43 * factor));
    result.get().M44 = JSIL.CloneParameter($thisType.T.get(this), $thisType.T.get(this).$Cast(matrix1.get().M44 * factor));
  };

  function Matrix$b1_Negate$33 (matrix) {
    throw $S00().Construct();
  };

  function Matrix$b1_Negate$34 (/* ref */ matrix, /* ref */ result) {
    throw $S00().Construct();
  };

  function Matrix$b1_op_Addition ($matrix1, $matrix2) {
    var matrix2 = new JSIL.BoxedVariable($matrix2);
    var matrix1 = new JSIL.BoxedVariable($matrix1);
    $thisType.Of($thisType.T.get(this)).Add(/* ref */ matrix1, /* ref */ matrix2, /* ref */ matrix1);
    return matrix1.get();
  };

  function Matrix$b1_op_Division$35 (matrix1, matrix2) {
    throw $S00().Construct();
  };

  function Matrix$b1_op_Division$36 (matrix1, divider) {
    throw $S00().Construct();
  };

  function Matrix$b1_op_Inequality (matrix1, matrix2) {
    var obj = null, obj2 = null, obj3 = null, obj4 = null, obj5 = null, obj6 = null, obj7 = null, obj8 = null, obj9 = null, obj10 = null, obj11 = null, obj12 = null, obj13 = null, obj14 = null, obj15 = null;
    if (obj = matrix1.M11 !== matrix2.M11) {
      var arg_57E_0 = obj;
    } else {
      var arg_579_2 = obj;
      arg_57E_0 = arg_579_2 | (matrix1.M12 !== matrix2.M12);
    }
    if (obj2 = arg_57E_0) {
      var arg_64C_0 = obj2;
    } else {
      var arg_647_2 = obj2;
      arg_64C_0 = arg_647_2 | (matrix1.M13 !== matrix2.M13);
    }
    if (obj3 = arg_64C_0) {
      var arg_71A_0 = obj3;
    } else {
      var arg_715_2 = obj3;
      arg_71A_0 = arg_715_2 | (matrix1.M14 !== matrix2.M14);
    }
    if (obj4 = arg_71A_0) {
      var arg_7E8_0 = obj4;
    } else {
      var arg_7E3_2 = obj4;
      arg_7E8_0 = arg_7E3_2 | (matrix1.M21 !== matrix2.M21);
    }
    if (obj5 = arg_7E8_0) {
      var arg_8B9_0 = obj5;
    } else {
      var arg_8B4_2 = obj5;
      arg_8B9_0 = arg_8B4_2 | (matrix1.M22 !== matrix2.M22);
    }
    if (obj6 = arg_8B9_0) {
      var arg_98A_0 = obj6;
    } else {
      var arg_985_2 = obj6;
      arg_98A_0 = arg_985_2 | (matrix1.M23 !== matrix2.M23);
    }
    if (obj7 = arg_98A_0) {
      var arg_A5B_0 = obj7;
    } else {
      var arg_A56_2 = obj7;
      arg_A5B_0 = arg_A56_2 | (matrix1.M24 !== matrix2.M24);
    }
    if (obj8 = arg_A5B_0) {
      var arg_B2C_0 = obj8;
    } else {
      var arg_B27_2 = obj8;
      arg_B2C_0 = arg_B27_2 | (matrix1.M31 !== matrix2.M31);
    }
    if (obj9 = arg_B2C_0) {
      var arg_BFD_0 = obj9;
    } else {
      var arg_BF8_2 = obj9;
      arg_BFD_0 = arg_BF8_2 | (matrix1.M32 !== matrix2.M32);
    }
    if (obj10 = arg_BFD_0) {
      var arg_CCE_0 = obj10;
    } else {
      var arg_CC9_2 = obj10;
      arg_CCE_0 = arg_CC9_2 | (matrix1.M33 !== matrix2.M33);
    }
    if (obj11 = arg_CCE_0) {
      var arg_D9F_0 = obj11;
    } else {
      var arg_D9A_2 = obj11;
      arg_D9F_0 = arg_D9A_2 | (matrix1.M34 !== matrix2.M34);
    }
    if (obj12 = arg_D9F_0) {
      var arg_E70_0 = obj12;
    } else {
      var arg_E6B_2 = obj12;
      arg_E70_0 = arg_E6B_2 | (matrix1.M41 !== matrix2.M41);
    }
    if (obj13 = arg_E70_0) {
      var arg_F41_0 = obj13;
    } else {
      var arg_F3C_2 = obj13;
      arg_F41_0 = arg_F3C_2 | (matrix1.M42 !== matrix2.M42);
    }
    if (obj14 = arg_F41_0) {
      var arg_1012_0 = obj14;
    } else {
      var arg_100D_2 = obj14;
      arg_1012_0 = arg_100D_2 | (matrix1.M43 !== matrix2.M43);
    }
    if (obj15 = arg_1012_0) {
      var arg_10E3_2 = obj15;
    } else {
      var arg_10DE_2 = obj15;
      arg_10E3_2 = arg_10DE_2 | (matrix1.M44 !== matrix2.M44);
    }
    return $T04().$Cast(arg_10E3_2);
  };

  function Matrix$b1_op_Multiply$37 (matrix1, matrix2) {
    var matrix3 = new ($thisType.Of($thisType.T.get(this))) ();
    var arg_1F8_2 = matrix1.M11 * matrix2.M11;
    var arg_264_2 = arg_1F8_2 + (matrix1.M12 * matrix2.M21);
    var arg_2D0_2 = arg_264_2 + (matrix1.M13 * matrix2.M31);
    matrix3.M11 = JSIL.CloneParameter($thisType.T.get(this), $thisType.T.get(this).$Cast(arg_2D0_2 + (matrix1.M14 * matrix2.M41)));
    var arg_4D6_2 = matrix1.M11 * matrix2.M12;
    var arg_542_2 = arg_4D6_2 + (matrix1.M12 * matrix2.M22);
    var arg_5AE_2 = arg_542_2 + (matrix1.M13 * matrix2.M32);
    matrix3.M12 = JSIL.CloneParameter($thisType.T.get(this), $thisType.T.get(this).$Cast(arg_5AE_2 + (matrix1.M14 * matrix2.M42)));
    var arg_7B4_2 = matrix1.M11 * matrix2.M13;
    var arg_820_2 = arg_7B4_2 + (matrix1.M12 * matrix2.M23);
    var arg_88C_2 = arg_820_2 + (matrix1.M13 * matrix2.M33);
    matrix3.M13 = JSIL.CloneParameter($thisType.T.get(this), $thisType.T.get(this).$Cast(arg_88C_2 + (matrix1.M14 * matrix2.M43)));
    var arg_A92_2 = matrix1.M11 * matrix2.M14;
    var arg_AFE_2 = arg_A92_2 + (matrix1.M12 * matrix2.M24);
    var arg_B6A_2 = arg_AFE_2 + (matrix1.M13 * matrix2.M34);
    matrix3.M14 = JSIL.CloneParameter($thisType.T.get(this), $thisType.T.get(this).$Cast(arg_B6A_2 + (matrix1.M14 * matrix2.M44)));
    var arg_D70_2 = matrix1.M21 * matrix2.M11;
    var arg_DDC_2 = arg_D70_2 + (matrix1.M22 * matrix2.M21);
    var arg_E48_2 = arg_DDC_2 + (matrix1.M23 * matrix2.M31);
    matrix3.M21 = JSIL.CloneParameter($thisType.T.get(this), $thisType.T.get(this).$Cast(arg_E48_2 + (matrix1.M24 * matrix2.M41)));
    var arg_104E_2 = matrix1.M21 * matrix2.M12;
    var arg_10BA_2 = arg_104E_2 + (matrix1.M22 * matrix2.M22);
    var arg_1126_2 = arg_10BA_2 + (matrix1.M23 * matrix2.M32);
    matrix3.M22 = JSIL.CloneParameter($thisType.T.get(this), $thisType.T.get(this).$Cast(arg_1126_2 + (matrix1.M24 * matrix2.M42)));
    var arg_132C_2 = matrix1.M21 * matrix2.M13;
    var arg_1398_2 = arg_132C_2 + (matrix1.M22 * matrix2.M23);
    var arg_1404_2 = arg_1398_2 + (matrix1.M23 * matrix2.M33);
    matrix3.M23 = JSIL.CloneParameter($thisType.T.get(this), $thisType.T.get(this).$Cast(arg_1404_2 + (matrix1.M24 * matrix2.M43)));
    var arg_160A_2 = matrix1.M21 * matrix2.M14;
    var arg_1676_2 = arg_160A_2 + (matrix1.M22 * matrix2.M24);
    var arg_16E2_2 = arg_1676_2 + (matrix1.M23 * matrix2.M34);
    matrix3.M24 = JSIL.CloneParameter($thisType.T.get(this), $thisType.T.get(this).$Cast(arg_16E2_2 + (matrix1.M24 * matrix2.M44)));
    var arg_18E8_2 = matrix1.M31 * matrix2.M11;
    var arg_1954_2 = arg_18E8_2 + (matrix1.M32 * matrix2.M21);
    var arg_19C0_2 = arg_1954_2 + (matrix1.M33 * matrix2.M31);
    matrix3.M31 = JSIL.CloneParameter($thisType.T.get(this), $thisType.T.get(this).$Cast(arg_19C0_2 + (matrix1.M34 * matrix2.M41)));
    var arg_1BC6_2 = matrix1.M31 * matrix2.M12;
    var arg_1C32_2 = arg_1BC6_2 + (matrix1.M32 * matrix2.M22);
    var arg_1C9E_2 = arg_1C32_2 + (matrix1.M33 * matrix2.M32);
    matrix3.M32 = JSIL.CloneParameter($thisType.T.get(this), $thisType.T.get(this).$Cast(arg_1C9E_2 + (matrix1.M34 * matrix2.M42)));
    var arg_1EA4_2 = matrix1.M31 * matrix2.M13;
    var arg_1F10_2 = arg_1EA4_2 + (matrix1.M32 * matrix2.M23);
    var arg_1F7C_2 = arg_1F10_2 + (matrix1.M33 * matrix2.M33);
    matrix3.M33 = JSIL.CloneParameter($thisType.T.get(this), $thisType.T.get(this).$Cast(arg_1F7C_2 + (matrix1.M34 * matrix2.M43)));
    var arg_2182_2 = matrix1.M31 * matrix2.M14;
    var arg_21EE_2 = arg_2182_2 + (matrix1.M32 * matrix2.M24);
    var arg_225A_2 = arg_21EE_2 + (matrix1.M33 * matrix2.M34);
    matrix3.M34 = JSIL.CloneParameter($thisType.T.get(this), $thisType.T.get(this).$Cast(arg_225A_2 + (matrix1.M34 * matrix2.M44)));
    var arg_2460_2 = matrix1.M41 * matrix2.M11;
    var arg_24CC_2 = arg_2460_2 + (matrix1.M42 * matrix2.M21);
    var arg_2538_2 = arg_24CC_2 + (matrix1.M43 * matrix2.M31);
    matrix3.M41 = JSIL.CloneParameter($thisType.T.get(this), $thisType.T.get(this).$Cast(arg_2538_2 + (matrix1.M44 * matrix2.M41)));
    var arg_273E_2 = matrix1.M41 * matrix2.M12;
    var arg_27AA_2 = arg_273E_2 + (matrix1.M42 * matrix2.M22);
    var arg_2816_2 = arg_27AA_2 + (matrix1.M43 * matrix2.M32);
    matrix3.M42 = JSIL.CloneParameter($thisType.T.get(this), $thisType.T.get(this).$Cast(arg_2816_2 + (matrix1.M44 * matrix2.M42)));
    var arg_2A1C_2 = matrix1.M41 * matrix2.M13;
    var arg_2A88_2 = arg_2A1C_2 + (matrix1.M42 * matrix2.M23);
    var arg_2AF4_2 = arg_2A88_2 + (matrix1.M43 * matrix2.M33);
    matrix3.M43 = JSIL.CloneParameter($thisType.T.get(this), $thisType.T.get(this).$Cast(arg_2AF4_2 + (matrix1.M44 * matrix2.M43)));
    var arg_2CFA_2 = matrix1.M41 * matrix2.M14;
    var arg_2D66_2 = arg_2CFA_2 + (matrix1.M42 * matrix2.M24);
    var arg_2DD2_2 = arg_2D66_2 + (matrix1.M43 * matrix2.M34);
    matrix3.M44 = JSIL.CloneParameter($thisType.T.get(this), $thisType.T.get(this).$Cast(arg_2DD2_2 + (matrix1.M44 * matrix2.M44)));
    return matrix3;
  };

  function Matrix$b1_op_Multiply$38 (matrix, scaleFactor) {
    throw $S00().Construct();
  };

  function Matrix$b1_op_Subtraction (matrix1, matrix2) {
    throw $S00().Construct();
  };

  function Matrix$b1_op_UnaryNegation (matrix1) {
    throw $S00().Construct();
  };

  function Matrix$b1_set_Backward (value) {
    this.M31 = JSIL.CloneParameter($thisType.T.get(this), value.Vector3$b1$X$value);
    this.M32 = JSIL.CloneParameter($thisType.T.get(this), value.Vector3$b1$Y$value);
    this.M33 = JSIL.CloneParameter($thisType.T.get(this), value.Vector3$b1$Z$value);
  };

  function Matrix$b1_set_Down (value) {
    this.M21 = JSIL.CloneParameter($thisType.T.get(this), $thisType.T.get(this).$Cast(-value.Vector3$b1$X$value));
    this.M22 = JSIL.CloneParameter($thisType.T.get(this), $thisType.T.get(this).$Cast(-value.Vector3$b1$Y$value));
    this.M23 = JSIL.CloneParameter($thisType.T.get(this), $thisType.T.get(this).$Cast(-value.Vector3$b1$Z$value));
  };

  function Matrix$b1_set_Forward (value) {
    this.M31 = JSIL.CloneParameter($thisType.T.get(this), $thisType.T.get(this).$Cast(-value.Vector3$b1$X$value));
    this.M32 = JSIL.CloneParameter($thisType.T.get(this), $thisType.T.get(this).$Cast(-value.Vector3$b1$Y$value));
    this.M33 = JSIL.CloneParameter($thisType.T.get(this), $thisType.T.get(this).$Cast(-value.Vector3$b1$Z$value));
  };

  function Matrix$b1_set_Left (value) {
    this.M11 = JSIL.CloneParameter($thisType.T.get(this), $thisType.T.get(this).$Cast(-value.Vector3$b1$X$value));
    this.M12 = JSIL.CloneParameter($thisType.T.get(this), $thisType.T.get(this).$Cast(-value.Vector3$b1$Y$value));
    this.M13 = JSIL.CloneParameter($thisType.T.get(this), $thisType.T.get(this).$Cast(-value.Vector3$b1$Z$value));
  };

  function Matrix$b1_set_Right (value) {
    this.M11 = JSIL.CloneParameter($thisType.T.get(this), value.Vector3$b1$X$value);
    this.M12 = JSIL.CloneParameter($thisType.T.get(this), value.Vector3$b1$Y$value);
    this.M13 = JSIL.CloneParameter($thisType.T.get(this), value.Vector3$b1$Z$value);
  };

  function Matrix$b1_set_Translation (value) {
    this.M41 = JSIL.CloneParameter($thisType.T.get(this), value.Vector3$b1$X$value);
    this.M42 = JSIL.CloneParameter($thisType.T.get(this), value.Vector3$b1$Y$value);
    this.M43 = JSIL.CloneParameter($thisType.T.get(this), value.Vector3$b1$Z$value);
  };

  function Matrix$b1_set_Up (value) {
    this.M21 = JSIL.CloneParameter($thisType.T.get(this), value.Vector3$b1$X$value);
    this.M22 = JSIL.CloneParameter($thisType.T.get(this), value.Vector3$b1$Y$value);
    this.M23 = JSIL.CloneParameter($thisType.T.get(this), value.Vector3$b1$Z$value);
  };

  function Matrix$b1_Subtract$39 (matrix1, matrix2) {
    throw $S00().Construct();
  };

  function Matrix$b1_Subtract$3A (/* ref */ matrix1, /* ref */ matrix2, /* ref */ result) {
    throw $S00().Construct();
  };

  function Matrix$b1_toString () {
    throw $S00().Construct();
  };

  function Matrix$b1_ToTArray (mat) {
    return JSIL.Array.New($thisType.T.get(this), [mat.M11, mat.M12, mat.M13, mat.M14, mat.M21, mat.M22, mat.M23, mat.M24, mat.M31, mat.M32, mat.M33, mat.M34, mat.M41, mat.M42, mat.M43, mat.M44]);
  };

  function Matrix$b1_Transpose$3B ($matrix) {
    var matrix = new JSIL.BoxedVariable($matrix);
    var ret = new JSIL.BoxedVariable(new ($thisType.Of($thisType.T.get(this))) ());
    $thisType.Of($thisType.T.get(this)).Transpose(/* ref */ matrix, /* ref */ ret);
    return ret.get();
  };

  function Matrix$b1_Transpose$3C (/* ref */ matrix, /* ref */ result) {
    result.get().M11 = JSIL.CloneParameter($thisType.T.get(this), matrix.get().M11);
    result.get().M12 = JSIL.CloneParameter($thisType.T.get(this), matrix.get().M21);
    result.get().M13 = JSIL.CloneParameter($thisType.T.get(this), matrix.get().M31);
    result.get().M14 = JSIL.CloneParameter($thisType.T.get(this), matrix.get().M41);
    result.get().M21 = JSIL.CloneParameter($thisType.T.get(this), matrix.get().M12);
    result.get().M22 = JSIL.CloneParameter($thisType.T.get(this), matrix.get().M22);
    result.get().M23 = JSIL.CloneParameter($thisType.T.get(this), matrix.get().M32);
    result.get().M24 = JSIL.CloneParameter($thisType.T.get(this), matrix.get().M42);
    result.get().M31 = JSIL.CloneParameter($thisType.T.get(this), matrix.get().M13);
    result.get().M32 = JSIL.CloneParameter($thisType.T.get(this), matrix.get().M23);
    result.get().M33 = JSIL.CloneParameter($thisType.T.get(this), matrix.get().M33);
    result.get().M34 = JSIL.CloneParameter($thisType.T.get(this), matrix.get().M43);
    result.get().M41 = JSIL.CloneParameter($thisType.T.get(this), matrix.get().M14);
    result.get().M42 = JSIL.CloneParameter($thisType.T.get(this), matrix.get().M24);
    result.get().M43 = JSIL.CloneParameter($thisType.T.get(this), matrix.get().M34);
    result.get().M44 = JSIL.CloneParameter($thisType.T.get(this), matrix.get().M44);
  };

  JSIL.MakeType({
      BaseType: $asm0B.TypeRef("System.ValueType"), 
      Name: "WWUtils.Math.Matrix`1", 
      IsPublic: true, 
      IsReferenceType: false, 
      GenericParameters: ["T"], 
      MaximumConstructorArguments: 16, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.GenericParameter("T"), $.GenericParameter("T"), 
          $.GenericParameter("T"), $.GenericParameter("T"), 
          $.GenericParameter("T"), $.GenericParameter("T"), 
          $.GenericParameter("T"), $.GenericParameter("T"), 
          $.GenericParameter("T"), $.GenericParameter("T"), 
          $.GenericParameter("T"), $.GenericParameter("T"), 
          $.GenericParameter("T"), $.GenericParameter("T"), 
          $.GenericParameter("T"), $.GenericParameter("T")
        ]), 
      Matrix$b1__ctor
    );

    $.Method({Static:true , Public:true }, "Add", 
      new JSIL.MethodSignature($asm0A.TypeRef("WWUtils.Math.Matrix`1", [$.GenericParameter("T")]), [$asm0A.TypeRef("WWUtils.Math.Matrix`1", [$.GenericParameter("T")]), $asm0A.TypeRef("WWUtils.Math.Matrix`1", [$.GenericParameter("T")])]), 
      Matrix$b1_Add$00
    );

    $.Method({Static:true , Public:true }, "Add", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("JSIL.Reference", [$asm0A.TypeRef("WWUtils.Math.Matrix`1", [$.GenericParameter("T")])]), $jsilcore.TypeRef("JSIL.Reference", [$asm0A.TypeRef("WWUtils.Math.Matrix`1", [$.GenericParameter("T")])]), 
          $jsilcore.TypeRef("JSIL.Reference", [$asm0A.TypeRef("WWUtils.Math.Matrix`1", [$.GenericParameter("T")])])
        ]), 
      Matrix$b1_Add$01
    );

    $.Method({Static:true , Public:true }, "CreateBillboard", 
      new JSIL.MethodSignature($asm0A.TypeRef("WWUtils.Math.Matrix`1", [$.GenericParameter("T")]), [
          $asm0A.TypeRef("WWUtils.Math.Vector3`1", [$.GenericParameter("T")]), $asm0A.TypeRef("WWUtils.Math.Vector3`1", [$.GenericParameter("T")]), 
          $asm0A.TypeRef("WWUtils.Math.Vector3`1", [$.GenericParameter("T")]), $asm0B.TypeRef("System.Nullable`1", [$asm0A.TypeRef("WWUtils.Math.Vector3`1", [$.GenericParameter("T")])])
        ]), 
      Matrix$b1_CreateBillboard$02
    );

    $.Method({Static:true , Public:true }, "CreateBillboard", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("JSIL.Reference", [$asm0A.TypeRef("WWUtils.Math.Vector3`1", [$.GenericParameter("T")])]), $jsilcore.TypeRef("JSIL.Reference", [$asm0A.TypeRef("WWUtils.Math.Vector3`1", [$.GenericParameter("T")])]), 
          $jsilcore.TypeRef("JSIL.Reference", [$asm0A.TypeRef("WWUtils.Math.Vector3`1", [$.GenericParameter("T")])]), $asm0B.TypeRef("System.Nullable`1", [$asm0A.TypeRef("WWUtils.Math.Vector3`1", [$.GenericParameter("T")])]), 
          $jsilcore.TypeRef("JSIL.Reference", [$asm0A.TypeRef("WWUtils.Math.Matrix`1", [$.GenericParameter("T")])])
        ]), 
      Matrix$b1_CreateBillboard$03
    );

    $.Method({Static:true , Public:true }, "CreateConstrainedBillboard", 
      new JSIL.MethodSignature($asm0A.TypeRef("WWUtils.Math.Matrix`1", [$.GenericParameter("T")]), [
          $asm0A.TypeRef("WWUtils.Math.Vector3`1", [$.GenericParameter("T")]), $asm0A.TypeRef("WWUtils.Math.Vector3`1", [$.GenericParameter("T")]), 
          $asm0A.TypeRef("WWUtils.Math.Vector3`1", [$.GenericParameter("T")]), $asm0B.TypeRef("System.Nullable`1", [$asm0A.TypeRef("WWUtils.Math.Vector3`1", [$.GenericParameter("T")])]), 
          $asm0B.TypeRef("System.Nullable`1", [$asm0A.TypeRef("WWUtils.Math.Vector3`1", [$.GenericParameter("T")])])
        ]), 
      Matrix$b1_CreateConstrainedBillboard$04
    );

    $.Method({Static:true , Public:true }, "CreateConstrainedBillboard", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("JSIL.Reference", [$asm0A.TypeRef("WWUtils.Math.Vector3`1", [$.GenericParameter("T")])]), $jsilcore.TypeRef("JSIL.Reference", [$asm0A.TypeRef("WWUtils.Math.Vector3`1", [$.GenericParameter("T")])]), 
          $jsilcore.TypeRef("JSIL.Reference", [$asm0A.TypeRef("WWUtils.Math.Vector3`1", [$.GenericParameter("T")])]), $asm0B.TypeRef("System.Nullable`1", [$asm0A.TypeRef("WWUtils.Math.Vector3`1", [$.GenericParameter("T")])]), 
          $asm0B.TypeRef("System.Nullable`1", [$asm0A.TypeRef("WWUtils.Math.Vector3`1", [$.GenericParameter("T")])]), $jsilcore.TypeRef("JSIL.Reference", [$asm0A.TypeRef("WWUtils.Math.Matrix`1", [$.GenericParameter("T")])])
        ]), 
      Matrix$b1_CreateConstrainedBillboard$05
    );

    $.Method({Static:true , Public:true }, "CreateFromAxisAngle", 
      new JSIL.MethodSignature($asm0A.TypeRef("WWUtils.Math.Matrix`1", [$.GenericParameter("T")]), [$asm0A.TypeRef("WWUtils.Math.Vector3`1", [$.GenericParameter("T")]), $.GenericParameter("T")]), 
      Matrix$b1_CreateFromAxisAngle$06
    );

    $.Method({Static:true , Public:true }, "CreateFromAxisAngle", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("JSIL.Reference", [$asm0A.TypeRef("WWUtils.Math.Vector3`1", [$.GenericParameter("T")])]), $.GenericParameter("T"), 
          $jsilcore.TypeRef("JSIL.Reference", [$asm0A.TypeRef("WWUtils.Math.Matrix`1", [$.GenericParameter("T")])])
        ]), 
      Matrix$b1_CreateFromAxisAngle$07
    );

    $.Method({Static:true , Public:true }, "CreateFromQuaternion", 
      new JSIL.MethodSignature($asm0A.TypeRef("WWUtils.Math.Matrix`1", [$.GenericParameter("T")]), [$asm0A.TypeRef("WWUtils.Math.Quaternion`1", [$.GenericParameter("T")])]), 
      Matrix$b1_CreateFromQuaternion$08
    );

    $.Method({Static:true , Public:true }, "CreateFromQuaternion", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("JSIL.Reference", [$asm0A.TypeRef("WWUtils.Math.Quaternion`1", [$.GenericParameter("T")])]), $jsilcore.TypeRef("JSIL.Reference", [$asm0A.TypeRef("WWUtils.Math.Matrix`1", [$.GenericParameter("T")])])]), 
      Matrix$b1_CreateFromQuaternion$09
    );

    $.Method({Static:true , Public:true }, "CreateFromYawPitchRoll", 
      new JSIL.MethodSignature($asm0A.TypeRef("WWUtils.Math.Matrix`1", [$.GenericParameter("T")]), [
          $.GenericParameter("T"), $.GenericParameter("T"), 
          $.GenericParameter("T")
        ]), 
      Matrix$b1_CreateFromYawPitchRoll
    );

    $.Method({Static:true , Public:true }, "CreateLookAt", 
      new JSIL.MethodSignature($asm0A.TypeRef("WWUtils.Math.Matrix`1", [$.GenericParameter("T")]), [
          $asm0A.TypeRef("WWUtils.Math.Vector3`1", [$.GenericParameter("T")]), $asm0A.TypeRef("WWUtils.Math.Vector3`1", [$.GenericParameter("T")]), 
          $asm0A.TypeRef("WWUtils.Math.Vector3`1", [$.GenericParameter("T")])
        ]), 
      Matrix$b1_CreateLookAt$0A
    );

    $.Method({Static:true , Public:true }, "CreateLookAt", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("JSIL.Reference", [$asm0A.TypeRef("WWUtils.Math.Vector3`1", [$.GenericParameter("T")])]), $jsilcore.TypeRef("JSIL.Reference", [$asm0A.TypeRef("WWUtils.Math.Vector3`1", [$.GenericParameter("T")])]), 
          $jsilcore.TypeRef("JSIL.Reference", [$asm0A.TypeRef("WWUtils.Math.Vector3`1", [$.GenericParameter("T")])]), $jsilcore.TypeRef("JSIL.Reference", [$asm0A.TypeRef("WWUtils.Math.Matrix`1", [$.GenericParameter("T")])])
        ]), 
      Matrix$b1_CreateLookAt$0B
    );

    $.Method({Static:true , Public:true }, "CreateOrthographic", 
      new JSIL.MethodSignature($asm0A.TypeRef("WWUtils.Math.Matrix`1", [$.GenericParameter("T")]), [
          $.GenericParameter("T"), $.GenericParameter("T"), 
          $.GenericParameter("T"), $.GenericParameter("T")
        ]), 
      Matrix$b1_CreateOrthographic$0C
    );

    $.Method({Static:true , Public:true }, "CreateOrthographic", 
      new JSIL.MethodSignature(null, [
          $.GenericParameter("T"), $.GenericParameter("T"), 
          $.GenericParameter("T"), $.GenericParameter("T"), 
          $jsilcore.TypeRef("JSIL.Reference", [$asm0A.TypeRef("WWUtils.Math.Matrix`1", [$.GenericParameter("T")])])
        ]), 
      Matrix$b1_CreateOrthographic$0D
    );

    $.Method({Static:true , Public:true }, "CreateOrthographicOffCenter", 
      new JSIL.MethodSignature($asm0A.TypeRef("WWUtils.Math.Matrix`1", [$.GenericParameter("T")]), [
          $.GenericParameter("T"), $.GenericParameter("T"), 
          $.GenericParameter("T"), $.GenericParameter("T"), 
          $.GenericParameter("T"), $.GenericParameter("T")
        ]), 
      Matrix$b1_CreateOrthographicOffCenter$0E
    );

    $.Method({Static:true , Public:true }, "CreateOrthographicOffCenter", 
      new JSIL.MethodSignature(null, [
          $.GenericParameter("T"), $.GenericParameter("T"), 
          $.GenericParameter("T"), $.GenericParameter("T"), 
          $.GenericParameter("T"), $.GenericParameter("T"), 
          $jsilcore.TypeRef("JSIL.Reference", [$asm0A.TypeRef("WWUtils.Math.Matrix`1", [$.GenericParameter("T")])])
        ]), 
      Matrix$b1_CreateOrthographicOffCenter$0F
    );

    $.Method({Static:true , Public:true }, "CreatePerspective", 
      new JSIL.MethodSignature($asm0A.TypeRef("WWUtils.Math.Matrix`1", [$.GenericParameter("T")]), [
          $.GenericParameter("T"), $.GenericParameter("T"), 
          $.GenericParameter("T"), $.GenericParameter("T")
        ]), 
      Matrix$b1_CreatePerspective$10
    );

    $.Method({Static:true , Public:true }, "CreatePerspective", 
      new JSIL.MethodSignature(null, [
          $.GenericParameter("T"), $.GenericParameter("T"), 
          $.GenericParameter("T"), $.GenericParameter("T"), 
          $jsilcore.TypeRef("JSIL.Reference", [$asm0A.TypeRef("WWUtils.Math.Matrix`1", [$.GenericParameter("T")])])
        ]), 
      Matrix$b1_CreatePerspective$11
    );

    $.Method({Static:true , Public:true }, "CreatePerspectiveFieldOfView", 
      new JSIL.MethodSignature($asm0A.TypeRef("WWUtils.Math.Matrix`1", [$.GenericParameter("T")]), [
          $.GenericParameter("T"), $.GenericParameter("T"), 
          $.GenericParameter("T"), $.GenericParameter("T")
        ]), 
      Matrix$b1_CreatePerspectiveFieldOfView$12
    );

    $.Method({Static:true , Public:true }, "CreatePerspectiveFieldOfView", 
      new JSIL.MethodSignature(null, [
          $.GenericParameter("T"), $.GenericParameter("T"), 
          $.GenericParameter("T"), $.GenericParameter("T"), 
          $jsilcore.TypeRef("JSIL.Reference", [$asm0A.TypeRef("WWUtils.Math.Matrix`1", [$.GenericParameter("T")])])
        ]), 
      Matrix$b1_CreatePerspectiveFieldOfView$13
    );

    $.Method({Static:true , Public:true }, "CreatePerspectiveOffCenter", 
      new JSIL.MethodSignature($asm0A.TypeRef("WWUtils.Math.Matrix`1", [$.GenericParameter("T")]), [
          $.GenericParameter("T"), $.GenericParameter("T"), 
          $.GenericParameter("T"), $.GenericParameter("T"), 
          $.GenericParameter("T"), $.GenericParameter("T")
        ]), 
      Matrix$b1_CreatePerspectiveOffCenter$14
    );

    $.Method({Static:true , Public:true }, "CreatePerspectiveOffCenter", 
      new JSIL.MethodSignature(null, [
          $.GenericParameter("T"), $.GenericParameter("T"), 
          $.GenericParameter("T"), $.GenericParameter("T"), 
          $.GenericParameter("T"), $.GenericParameter("T"), 
          $jsilcore.TypeRef("JSIL.Reference", [$asm0A.TypeRef("WWUtils.Math.Matrix`1", [$.GenericParameter("T")])])
        ]), 
      Matrix$b1_CreatePerspectiveOffCenter$15
    );

    $.Method({Static:true , Public:true }, "CreateRotationX", 
      new JSIL.MethodSignature($asm0A.TypeRef("WWUtils.Math.Matrix`1", [$.GenericParameter("T")]), [$.GenericParameter("T")]), 
      Matrix$b1_CreateRotationX$16
    );

    $.Method({Static:true , Public:true }, "CreateRotationX", 
      new JSIL.MethodSignature(null, [$.GenericParameter("T"), $jsilcore.TypeRef("JSIL.Reference", [$asm0A.TypeRef("WWUtils.Math.Matrix`1", [$.GenericParameter("T")])])]), 
      Matrix$b1_CreateRotationX$17
    );

    $.Method({Static:true , Public:true }, "CreateRotationY", 
      new JSIL.MethodSignature($asm0A.TypeRef("WWUtils.Math.Matrix`1", [$.GenericParameter("T")]), [$.GenericParameter("T")]), 
      Matrix$b1_CreateRotationY$18
    );

    $.Method({Static:true , Public:true }, "CreateRotationY", 
      new JSIL.MethodSignature(null, [$.GenericParameter("T"), $jsilcore.TypeRef("JSIL.Reference", [$asm0A.TypeRef("WWUtils.Math.Matrix`1", [$.GenericParameter("T")])])]), 
      Matrix$b1_CreateRotationY$19
    );

    $.Method({Static:true , Public:true }, "CreateRotationZ", 
      new JSIL.MethodSignature($asm0A.TypeRef("WWUtils.Math.Matrix`1", [$.GenericParameter("T")]), [$.GenericParameter("T")]), 
      Matrix$b1_CreateRotationZ$1A
    );

    $.Method({Static:true , Public:true }, "CreateRotationZ", 
      new JSIL.MethodSignature(null, [$.GenericParameter("T"), $jsilcore.TypeRef("JSIL.Reference", [$asm0A.TypeRef("WWUtils.Math.Matrix`1", [$.GenericParameter("T")])])]), 
      Matrix$b1_CreateRotationZ$1B
    );

    $.Method({Static:true , Public:true }, "CreateScale", 
      new JSIL.MethodSignature($asm0A.TypeRef("WWUtils.Math.Matrix`1", [$.GenericParameter("T")]), [$.GenericParameter("T")]), 
      Matrix$b1_CreateScale$1C
    );

    $.Method({Static:true , Public:true }, "CreateScale", 
      new JSIL.MethodSignature(null, [$.GenericParameter("T"), $jsilcore.TypeRef("JSIL.Reference", [$asm0A.TypeRef("WWUtils.Math.Matrix`1", [$.GenericParameter("T")])])]), 
      Matrix$b1_CreateScale$1D
    );

    $.Method({Static:true , Public:true }, "CreateScale", 
      new JSIL.MethodSignature($asm0A.TypeRef("WWUtils.Math.Matrix`1", [$.GenericParameter("T")]), [
          $.GenericParameter("T"), $.GenericParameter("T"), 
          $.GenericParameter("T")
        ]), 
      Matrix$b1_CreateScale$1E
    );

    $.Method({Static:true , Public:true }, "CreateScale", 
      new JSIL.MethodSignature(null, [
          $.GenericParameter("T"), $.GenericParameter("T"), 
          $.GenericParameter("T"), $jsilcore.TypeRef("JSIL.Reference", [$asm0A.TypeRef("WWUtils.Math.Matrix`1", [$.GenericParameter("T")])])
        ]), 
      Matrix$b1_CreateScale$1F
    );

    $.Method({Static:true , Public:true }, "CreateScale", 
      new JSIL.MethodSignature($asm0A.TypeRef("WWUtils.Math.Matrix`1", [$.GenericParameter("T")]), [$asm0A.TypeRef("WWUtils.Math.Vector3`1", [$.GenericParameter("T")])]), 
      Matrix$b1_CreateScale$20
    );

    $.Method({Static:true , Public:true }, "CreateScale", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("JSIL.Reference", [$asm0A.TypeRef("WWUtils.Math.Vector3`1", [$.GenericParameter("T")])]), $jsilcore.TypeRef("JSIL.Reference", [$asm0A.TypeRef("WWUtils.Math.Matrix`1", [$.GenericParameter("T")])])]), 
      Matrix$b1_CreateScale$21
    );

    $.Method({Static:true , Public:true }, "CreateTranslation", 
      new JSIL.MethodSignature($asm0A.TypeRef("WWUtils.Math.Matrix`1", [$.GenericParameter("T")]), [
          $.GenericParameter("T"), $.GenericParameter("T"), 
          $.GenericParameter("T")
        ]), 
      Matrix$b1_CreateTranslation$22
    );

    $.Method({Static:true , Public:true }, "CreateTranslation", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("JSIL.Reference", [$asm0A.TypeRef("WWUtils.Math.Vector3`1", [$.GenericParameter("T")])]), $jsilcore.TypeRef("JSIL.Reference", [$asm0A.TypeRef("WWUtils.Math.Matrix`1", [$.GenericParameter("T")])])]), 
      Matrix$b1_CreateTranslation$23
    );

    $.Method({Static:true , Public:true }, "CreateTranslation", 
      new JSIL.MethodSignature($asm0A.TypeRef("WWUtils.Math.Matrix`1", [$.GenericParameter("T")]), [$asm0A.TypeRef("WWUtils.Math.Vector3`1", [$.GenericParameter("T")])]), 
      Matrix$b1_CreateTranslation$24
    );

    $.Method({Static:true , Public:true }, "CreateTranslation", 
      new JSIL.MethodSignature(null, [
          $.GenericParameter("T"), $.GenericParameter("T"), 
          $.GenericParameter("T"), $jsilcore.TypeRef("JSIL.Reference", [$asm0A.TypeRef("WWUtils.Math.Matrix`1", [$.GenericParameter("T")])])
        ]), 
      Matrix$b1_CreateTranslation$25
    );

    $.Method({Static:false, Public:true }, "Determinant", 
      new JSIL.MethodSignature($.GenericParameter("T"), null), 
      Matrix$b1_Determinant
    );

    $.Method({Static:true , Public:true }, "Divide", 
      new JSIL.MethodSignature($asm0A.TypeRef("WWUtils.Math.Matrix`1", [$.GenericParameter("T")]), [$asm0A.TypeRef("WWUtils.Math.Matrix`1", [$.GenericParameter("T")]), $asm0A.TypeRef("WWUtils.Math.Matrix`1", [$.GenericParameter("T")])]), 
      Matrix$b1_Divide$26
    );

    $.Method({Static:true , Public:true }, "Divide", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("JSIL.Reference", [$asm0A.TypeRef("WWUtils.Math.Matrix`1", [$.GenericParameter("T")])]), $jsilcore.TypeRef("JSIL.Reference", [$asm0A.TypeRef("WWUtils.Math.Matrix`1", [$.GenericParameter("T")])]), 
          $jsilcore.TypeRef("JSIL.Reference", [$asm0A.TypeRef("WWUtils.Math.Matrix`1", [$.GenericParameter("T")])])
        ]), 
      Matrix$b1_Divide$27
    );

    $.Method({Static:true , Public:true }, "Divide", 
      new JSIL.MethodSignature($asm0A.TypeRef("WWUtils.Math.Matrix`1", [$.GenericParameter("T")]), [$asm0A.TypeRef("WWUtils.Math.Matrix`1", [$.GenericParameter("T")]), $.GenericParameter("T")]), 
      Matrix$b1_Divide$28
    );

    $.Method({Static:true , Public:true }, "Divide", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("JSIL.Reference", [$asm0A.TypeRef("WWUtils.Math.Matrix`1", [$.GenericParameter("T")])]), $.GenericParameter("T"), 
          $jsilcore.TypeRef("JSIL.Reference", [$asm0A.TypeRef("WWUtils.Math.Matrix`1", [$.GenericParameter("T")])])
        ]), 
      Matrix$b1_Divide$29
    );

    $.Method({Static:false, Public:true , Virtual:true }, "Equals", 
      new JSIL.MethodSignature($.Boolean, [$asm0A.TypeRef("WWUtils.Math.Matrix`1", [$.GenericParameter("T")])]), 
      Matrix$b1_Equals$2A
    );

    $.Method({Static:false, Public:true , Virtual:true }, "Object.Equals", 
      new JSIL.MethodSignature($.Boolean, [$.Object]), 
      Matrix$b1_Object_Equals
    );

    $.Method({Static:true , Public:false}, "findDeterminants", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("JSIL.Reference", [$asm0A.TypeRef("WWUtils.Math.Matrix`1", [$.GenericParameter("T")])]), $jsilcore.TypeRef("JSIL.Reference", [$.GenericParameter("T")]), 
          $jsilcore.TypeRef("JSIL.Reference", [$.GenericParameter("T")]), $jsilcore.TypeRef("JSIL.Reference", [$.GenericParameter("T")]), 
          $jsilcore.TypeRef("JSIL.Reference", [$.GenericParameter("T")]), $jsilcore.TypeRef("JSIL.Reference", [$.GenericParameter("T")]), 
          $jsilcore.TypeRef("JSIL.Reference", [$.GenericParameter("T")]), $jsilcore.TypeRef("JSIL.Reference", [$.GenericParameter("T")]), 
          $jsilcore.TypeRef("JSIL.Reference", [$.GenericParameter("T")]), $jsilcore.TypeRef("JSIL.Reference", [$.GenericParameter("T")]), 
          $jsilcore.TypeRef("JSIL.Reference", [$.GenericParameter("T")]), $jsilcore.TypeRef("JSIL.Reference", [$.GenericParameter("T")]), 
          $jsilcore.TypeRef("JSIL.Reference", [$.GenericParameter("T")]), $jsilcore.TypeRef("JSIL.Reference", [$.GenericParameter("T")])
        ]), 
      Matrix$b1_findDeterminants
    );

    $.Method({Static:false, Public:true }, "get_Backward", 
      new JSIL.MethodSignature($asm0A.TypeRef("WWUtils.Math.Vector3`1", [$.GenericParameter("T")]), null), 
      Matrix$b1_get_Backward
    );

    $.Method({Static:false, Public:true }, "get_Down", 
      new JSIL.MethodSignature($asm0A.TypeRef("WWUtils.Math.Vector3`1", [$.GenericParameter("T")]), null), 
      JSIL.UntranslatableFunction("WWUtils.Math.Vector3`1<T> WWUtils.Math.Matrix`1::get_Down()")
    );

    $.Method({Static:false, Public:true }, "get_Forward", 
      new JSIL.MethodSignature($asm0A.TypeRef("WWUtils.Math.Vector3`1", [$.GenericParameter("T")]), null), 
      JSIL.UntranslatableFunction("WWUtils.Math.Vector3`1<T> WWUtils.Math.Matrix`1::get_Forward()")
    );

    $.Method({Static:true , Public:true }, "get_Identity", 
      new JSIL.MethodSignature($asm0A.TypeRef("WWUtils.Math.Matrix`1", [$.GenericParameter("T")]), null), 
      Matrix$b1_get_Identity
    );

    $.Method({Static:false, Public:true }, "get_Left", 
      new JSIL.MethodSignature($asm0A.TypeRef("WWUtils.Math.Vector3`1", [$.GenericParameter("T")]), null), 
      JSIL.UntranslatableFunction("WWUtils.Math.Vector3`1<T> WWUtils.Math.Matrix`1::get_Left()")
    );

    $.Method({Static:false, Public:true }, "get_Right", 
      new JSIL.MethodSignature($asm0A.TypeRef("WWUtils.Math.Vector3`1", [$.GenericParameter("T")]), null), 
      Matrix$b1_get_Right
    );

    $.Method({Static:false, Public:true }, "get_Translation", 
      new JSIL.MethodSignature($asm0A.TypeRef("WWUtils.Math.Vector3`1", [$.GenericParameter("T")]), null), 
      Matrix$b1_get_Translation
    );

    $.Method({Static:false, Public:true }, "get_Up", 
      new JSIL.MethodSignature($asm0A.TypeRef("WWUtils.Math.Vector3`1", [$.GenericParameter("T")]), null), 
      Matrix$b1_get_Up
    );

    $.Method({Static:false, Public:true , Virtual:true }, "GetHashCode", 
      JSIL.MethodSignature.Return($.Int32), 
      Matrix$b1_GetHashCode
    );

    $.Method({Static:true , Public:true }, "Invert", 
      new JSIL.MethodSignature($asm0A.TypeRef("WWUtils.Math.Matrix`1", [$.GenericParameter("T")]), [$asm0A.TypeRef("WWUtils.Math.Matrix`1", [$.GenericParameter("T")])]), 
      Matrix$b1_Invert$2B
    );

    $.Method({Static:true , Public:true }, "Invert", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("JSIL.Reference", [$asm0A.TypeRef("WWUtils.Math.Matrix`1", [$.GenericParameter("T")])]), $jsilcore.TypeRef("JSIL.Reference", [$asm0A.TypeRef("WWUtils.Math.Matrix`1", [$.GenericParameter("T")])])]), 
      Matrix$b1_Invert$2C
    );

    $.Method({Static:true , Public:true }, "Lerp", 
      new JSIL.MethodSignature($asm0A.TypeRef("WWUtils.Math.Matrix`1", [$.GenericParameter("T")]), [
          $asm0A.TypeRef("WWUtils.Math.Matrix`1", [$.GenericParameter("T")]), $asm0A.TypeRef("WWUtils.Math.Matrix`1", [$.GenericParameter("T")]), 
          $.GenericParameter("T")
        ]), 
      Matrix$b1_Lerp$2D
    );

    $.Method({Static:true , Public:true }, "Lerp", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("JSIL.Reference", [$asm0A.TypeRef("WWUtils.Math.Matrix`1", [$.GenericParameter("T")])]), $jsilcore.TypeRef("JSIL.Reference", [$asm0A.TypeRef("WWUtils.Math.Matrix`1", [$.GenericParameter("T")])]), 
          $.GenericParameter("T"), $jsilcore.TypeRef("JSIL.Reference", [$asm0A.TypeRef("WWUtils.Math.Matrix`1", [$.GenericParameter("T")])])
        ]), 
      Matrix$b1_Lerp$2E
    );

    $.Method({Static:true , Public:true }, "Multiply", 
      new JSIL.MethodSignature($asm0A.TypeRef("WWUtils.Math.Matrix`1", [$.GenericParameter("T")]), [$asm0A.TypeRef("WWUtils.Math.Matrix`1", [$.GenericParameter("T")]), $asm0A.TypeRef("WWUtils.Math.Matrix`1", [$.GenericParameter("T")])]), 
      Matrix$b1_Multiply$2F
    );

    $.Method({Static:true , Public:true }, "Multiply", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("JSIL.Reference", [$asm0A.TypeRef("WWUtils.Math.Matrix`1", [$.GenericParameter("T")])]), $jsilcore.TypeRef("JSIL.Reference", [$asm0A.TypeRef("WWUtils.Math.Matrix`1", [$.GenericParameter("T")])]), 
          $jsilcore.TypeRef("JSIL.Reference", [$asm0A.TypeRef("WWUtils.Math.Matrix`1", [$.GenericParameter("T")])])
        ]), 
      Matrix$b1_Multiply$30
    );

    $.Method({Static:true , Public:true }, "Multiply", 
      new JSIL.MethodSignature($asm0A.TypeRef("WWUtils.Math.Matrix`1", [$.GenericParameter("T")]), [$asm0A.TypeRef("WWUtils.Math.Matrix`1", [$.GenericParameter("T")]), $.GenericParameter("T")]), 
      Matrix$b1_Multiply$31
    );

    $.Method({Static:true , Public:true }, "Multiply", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("JSIL.Reference", [$asm0A.TypeRef("WWUtils.Math.Matrix`1", [$.GenericParameter("T")])]), $.GenericParameter("T"), 
          $jsilcore.TypeRef("JSIL.Reference", [$asm0A.TypeRef("WWUtils.Math.Matrix`1", [$.GenericParameter("T")])])
        ]), 
      Matrix$b1_Multiply$32
    );

    $.Method({Static:true , Public:true }, "Negate", 
      new JSIL.MethodSignature($asm0A.TypeRef("WWUtils.Math.Matrix`1", [$.GenericParameter("T")]), [$asm0A.TypeRef("WWUtils.Math.Matrix`1", [$.GenericParameter("T")])]), 
      Matrix$b1_Negate$33
    );

    $.Method({Static:true , Public:true }, "Negate", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("JSIL.Reference", [$asm0A.TypeRef("WWUtils.Math.Matrix`1", [$.GenericParameter("T")])]), $jsilcore.TypeRef("JSIL.Reference", [$asm0A.TypeRef("WWUtils.Math.Matrix`1", [$.GenericParameter("T")])])]), 
      Matrix$b1_Negate$34
    );

    $.Method({Static:true , Public:true }, "op_Addition", 
      new JSIL.MethodSignature($asm0A.TypeRef("WWUtils.Math.Matrix`1", [$.GenericParameter("T")]), [$asm0A.TypeRef("WWUtils.Math.Matrix`1", [$.GenericParameter("T")]), $asm0A.TypeRef("WWUtils.Math.Matrix`1", [$.GenericParameter("T")])]), 
      Matrix$b1_op_Addition
    );

    $.Method({Static:true , Public:true }, "op_Division", 
      new JSIL.MethodSignature($asm0A.TypeRef("WWUtils.Math.Matrix`1", [$.GenericParameter("T")]), [$asm0A.TypeRef("WWUtils.Math.Matrix`1", [$.GenericParameter("T")]), $asm0A.TypeRef("WWUtils.Math.Matrix`1", [$.GenericParameter("T")])]), 
      Matrix$b1_op_Division$35
    );

    $.Method({Static:true , Public:true }, "op_Division", 
      new JSIL.MethodSignature($asm0A.TypeRef("WWUtils.Math.Matrix`1", [$.GenericParameter("T")]), [$asm0A.TypeRef("WWUtils.Math.Matrix`1", [$.GenericParameter("T")]), $.GenericParameter("T")]), 
      Matrix$b1_op_Division$36
    );

    $.Method({Static:true , Public:true }, "op_Equality", 
      new JSIL.MethodSignature($.Boolean, [$asm0A.TypeRef("WWUtils.Math.Matrix`1", [$.GenericParameter("T")]), $asm0A.TypeRef("WWUtils.Math.Matrix`1", [$.GenericParameter("T")])]), 
      JSIL.UntranslatableFunction("System.Boolean WWUtils.Math.Matrix`1::op_Equality(WWUtils.Math.Matrix`1<T>,WWUtils.Math.Matrix`1<T>)")
    );

    $.Method({Static:true , Public:true }, "op_Inequality", 
      new JSIL.MethodSignature($.Boolean, [$asm0A.TypeRef("WWUtils.Math.Matrix`1", [$.GenericParameter("T")]), $asm0A.TypeRef("WWUtils.Math.Matrix`1", [$.GenericParameter("T")])]), 
      Matrix$b1_op_Inequality
    );

    $.Method({Static:true , Public:true }, "op_Multiply", 
      new JSIL.MethodSignature($asm0A.TypeRef("WWUtils.Math.Matrix`1", [$.GenericParameter("T")]), [$asm0A.TypeRef("WWUtils.Math.Matrix`1", [$.GenericParameter("T")]), $asm0A.TypeRef("WWUtils.Math.Matrix`1", [$.GenericParameter("T")])]), 
      Matrix$b1_op_Multiply$37
    );

    $.Method({Static:true , Public:true }, "op_Multiply", 
      new JSIL.MethodSignature($asm0A.TypeRef("WWUtils.Math.Matrix`1", [$.GenericParameter("T")]), [$asm0A.TypeRef("WWUtils.Math.Matrix`1", [$.GenericParameter("T")]), $.GenericParameter("T")]), 
      Matrix$b1_op_Multiply$38
    );

    $.Method({Static:true , Public:true }, "op_Subtraction", 
      new JSIL.MethodSignature($asm0A.TypeRef("WWUtils.Math.Matrix`1", [$.GenericParameter("T")]), [$asm0A.TypeRef("WWUtils.Math.Matrix`1", [$.GenericParameter("T")]), $asm0A.TypeRef("WWUtils.Math.Matrix`1", [$.GenericParameter("T")])]), 
      Matrix$b1_op_Subtraction
    );

    $.Method({Static:true , Public:true }, "op_UnaryNegation", 
      new JSIL.MethodSignature($asm0A.TypeRef("WWUtils.Math.Matrix`1", [$.GenericParameter("T")]), [$asm0A.TypeRef("WWUtils.Math.Matrix`1", [$.GenericParameter("T")])]), 
      Matrix$b1_op_UnaryNegation
    );

    $.Method({Static:false, Public:true }, "set_Backward", 
      new JSIL.MethodSignature(null, [$asm0A.TypeRef("WWUtils.Math.Vector3`1", [$.GenericParameter("T")])]), 
      Matrix$b1_set_Backward
    );

    $.Method({Static:false, Public:true }, "set_Down", 
      new JSIL.MethodSignature(null, [$asm0A.TypeRef("WWUtils.Math.Vector3`1", [$.GenericParameter("T")])]), 
      Matrix$b1_set_Down
    );

    $.Method({Static:false, Public:true }, "set_Forward", 
      new JSIL.MethodSignature(null, [$asm0A.TypeRef("WWUtils.Math.Vector3`1", [$.GenericParameter("T")])]), 
      Matrix$b1_set_Forward
    );

    $.Method({Static:false, Public:true }, "set_Left", 
      new JSIL.MethodSignature(null, [$asm0A.TypeRef("WWUtils.Math.Vector3`1", [$.GenericParameter("T")])]), 
      Matrix$b1_set_Left
    );

    $.Method({Static:false, Public:true }, "set_Right", 
      new JSIL.MethodSignature(null, [$asm0A.TypeRef("WWUtils.Math.Vector3`1", [$.GenericParameter("T")])]), 
      Matrix$b1_set_Right
    );

    $.Method({Static:false, Public:true }, "set_Translation", 
      new JSIL.MethodSignature(null, [$asm0A.TypeRef("WWUtils.Math.Vector3`1", [$.GenericParameter("T")])]), 
      Matrix$b1_set_Translation
    );

    $.Method({Static:false, Public:true }, "set_Up", 
      new JSIL.MethodSignature(null, [$asm0A.TypeRef("WWUtils.Math.Vector3`1", [$.GenericParameter("T")])]), 
      Matrix$b1_set_Up
    );

    $.Method({Static:true , Public:true }, "Subtract", 
      new JSIL.MethodSignature($asm0A.TypeRef("WWUtils.Math.Matrix`1", [$.GenericParameter("T")]), [$asm0A.TypeRef("WWUtils.Math.Matrix`1", [$.GenericParameter("T")]), $asm0A.TypeRef("WWUtils.Math.Matrix`1", [$.GenericParameter("T")])]), 
      Matrix$b1_Subtract$39
    );

    $.Method({Static:true , Public:true }, "Subtract", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("JSIL.Reference", [$asm0A.TypeRef("WWUtils.Math.Matrix`1", [$.GenericParameter("T")])]), $jsilcore.TypeRef("JSIL.Reference", [$asm0A.TypeRef("WWUtils.Math.Matrix`1", [$.GenericParameter("T")])]), 
          $jsilcore.TypeRef("JSIL.Reference", [$asm0A.TypeRef("WWUtils.Math.Matrix`1", [$.GenericParameter("T")])])
        ]), 
      Matrix$b1_Subtract$3A
    );

    $.Method({Static:false, Public:true , Virtual:true }, "toString", 
      JSIL.MethodSignature.Return($.String), 
      Matrix$b1_toString
    );

    $.Method({Static:true , Public:true }, "ToTArray", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.GenericParameter("T")]), [$asm0A.TypeRef("WWUtils.Math.Matrix`1", [$.GenericParameter("T")])]), 
      Matrix$b1_ToTArray
    );

    $.Method({Static:true , Public:true }, "Transpose", 
      new JSIL.MethodSignature($asm0A.TypeRef("WWUtils.Math.Matrix`1", [$.GenericParameter("T")]), [$asm0A.TypeRef("WWUtils.Math.Matrix`1", [$.GenericParameter("T")])]), 
      Matrix$b1_Transpose$3B
    );

    $.Method({Static:true , Public:true }, "Transpose", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("JSIL.Reference", [$asm0A.TypeRef("WWUtils.Math.Matrix`1", [$.GenericParameter("T")])]), $jsilcore.TypeRef("JSIL.Reference", [$asm0A.TypeRef("WWUtils.Math.Matrix`1", [$.GenericParameter("T")])])]), 
      Matrix$b1_Transpose$3C
    );

    $.Field({Static:false, Public:true }, "M11", $.GenericParameter("T")); 
    $.Field({Static:false, Public:true }, "M12", $.GenericParameter("T")); 
    $.Field({Static:false, Public:true }, "M13", $.GenericParameter("T")); 
    $.Field({Static:false, Public:true }, "M14", $.GenericParameter("T")); 
    $.Field({Static:false, Public:true }, "M21", $.GenericParameter("T")); 
    $.Field({Static:false, Public:true }, "M22", $.GenericParameter("T")); 
    $.Field({Static:false, Public:true }, "M23", $.GenericParameter("T")); 
    $.Field({Static:false, Public:true }, "M24", $.GenericParameter("T")); 
    $.Field({Static:false, Public:true }, "M31", $.GenericParameter("T")); 
    $.Field({Static:false, Public:true }, "M32", $.GenericParameter("T")); 
    $.Field({Static:false, Public:true }, "M33", $.GenericParameter("T")); 
    $.Field({Static:false, Public:true }, "M34", $.GenericParameter("T")); 
    $.Field({Static:false, Public:true }, "M41", $.GenericParameter("T")); 
    $.Field({Static:false, Public:true }, "M42", $.GenericParameter("T")); 
    $.Field({Static:false, Public:true }, "M43", $.GenericParameter("T")); 
    $.Field({Static:false, Public:true }, "M44", $.GenericParameter("T")); 
    $.Field({Static:true , Public:false}, "identity", $asm0A.TypeRef("WWUtils.Math.Matrix`1", [$.GenericParameter("T")])); 

    $.Method({Static:true , Public:false}, ".cctor", 
      JSIL.MethodSignature.Void, 
      JSIL.UntranslatableFunction("System.Void WWUtils.Math.Matrix`1::.cctor()")
    );

    $.Property({Static:false, Public:true }, "Backward", $asm0A.TypeRef("WWUtils.Math.Vector3`1", [$.GenericParameter("T")]));

    $.Property({Static:false, Public:true }, "Down", $asm0A.TypeRef("WWUtils.Math.Vector3`1", [$.GenericParameter("T")]));

    $.Property({Static:false, Public:true }, "Forward", $asm0A.TypeRef("WWUtils.Math.Vector3`1", [$.GenericParameter("T")]));

    $.GenericProperty({Static:true , Public:true }, "Identity", $asm0A.TypeRef("WWUtils.Math.Matrix`1", [$.GenericParameter("T")]));

    $.Property({Static:false, Public:true }, "Left", $asm0A.TypeRef("WWUtils.Math.Vector3`1", [$.GenericParameter("T")]));

    $.Property({Static:false, Public:true }, "Right", $asm0A.TypeRef("WWUtils.Math.Vector3`1", [$.GenericParameter("T")]));

    $.Property({Static:false, Public:true }, "Translation", $asm0A.TypeRef("WWUtils.Math.Vector3`1", [$.GenericParameter("T")]));

    $.Property({Static:false, Public:true }, "Up", $asm0A.TypeRef("WWUtils.Math.Vector3`1", [$.GenericParameter("T")]));

    $.ImplementInterfaces(
      /* 0 */ $asm0B.TypeRef("System.IEquatable`1", [$asm0A.TypeRef("WWUtils.Math.Matrix`1", [$.GenericParameter("T")])])
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* struct WWUtils.Math.Quaternion`1 */ 

(function Quaternion$b1$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm0B.System.NotImplementedException)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm0B.System.Object)) ();
  };
  var $S00 = function () {
    return ($S00 = JSIL.Memoize(new JSIL.ConstructorSignature($asm0B.TypeRef("System.NotImplementedException"), null))) ();
  };

  function Quaternion$b1__ctor$00 (x, y, z, w) {
    this.X = x;
    this.Y = y;
    this.Z = z;
    this.W = w;
  };

  function Quaternion$b1__ctor$01 (vectorPart, scalarPart) {
    this.X = JSIL.CloneParameter($thisType.T.get(this), vectorPart.Vector3$b1$X$value);
    this.Y = JSIL.CloneParameter($thisType.T.get(this), vectorPart.Vector3$b1$Y$value);
    this.Z = JSIL.CloneParameter($thisType.T.get(this), vectorPart.Vector3$b1$Z$value);
    this.W = scalarPart;
  };

  function Quaternion$b1_Add$02 (quaternion1, quaternion2) {
    throw $S00().Construct();
  };

  function Quaternion$b1_Add$03 (/* ref */ quaternion1, /* ref */ quaternion2, /* ref */ result) {
    throw $S00().Construct();
  };

  function Quaternion$b1_CreateFromAxisAngle$04 (axis, angle) {
    throw $S00().Construct();
  };

  function Quaternion$b1_CreateFromAxisAngle$05 (/* ref */ axis, angle, /* ref */ result) {
    throw $S00().Construct();
  };

  function Quaternion$b1_CreateFromRotationMatrix$06 (matrix) {
    throw $S00().Construct();
  };

  function Quaternion$b1_CreateFromRotationMatrix$07 (/* ref */ matrix, /* ref */ result) {
    throw $S00().Construct();
  };

  function Quaternion$b1_Divide$08 (quaternion1, quaternion2) {
    throw $S00().Construct();
  };

  function Quaternion$b1_Divide$09 (/* ref */ quaternion1, /* ref */ quaternion2, /* ref */ result) {
    throw $S00().Construct();
  };

  function Quaternion$b1_Dot$0A (quaternion1, quaternion2) {
    throw $S00().Construct();
  };

  function Quaternion$b1_Dot$0B (/* ref */ quaternion1, /* ref */ quaternion2, /* ref */ result) {
    throw $S00().Construct();
  };

  function Quaternion$b1_Object_Equals (obj) {
    throw $S00().Construct();
  };

  function Quaternion$b1_Equals$0C (other) {
    throw $S00().Construct();
  };

  function Quaternion$b1_get_Identity () {
    return $thisType.Of($thisType.T.get(this)).identity;
  };

  function Quaternion$b1_GetHashCode () {
    throw $S00().Construct();
  };

  function Quaternion$b1_Inverse$0D (quaternion) {
    throw $S00().Construct();
  };

  function Quaternion$b1_Inverse$0E (/* ref */ quaternion, /* ref */ result) {
    throw $S00().Construct();
  };

  function Quaternion$b1_Length () {
    throw $S00().Construct();
  };

  function Quaternion$b1_LengthSquared () {
    throw $S00().Construct();
  };

  function Quaternion$b1_Lerp$0F (quaternion1, quaternion2, amount) {
    throw $S00().Construct();
  };

  function Quaternion$b1_Lerp$10 (/* ref */ quaternion1, /* ref */ quaternion2, amount, /* ref */ result) {
    throw $S00().Construct();
  };

  function Quaternion$b1_Multiply$11 (quaternion1, quaternion2) {
    throw $S00().Construct();
  };

  function Quaternion$b1_Multiply$12 (quaternion1, scaleFactor) {
    throw $S00().Construct();
  };

  function Quaternion$b1_Multiply$13 (/* ref */ quaternion1, scaleFactor, /* ref */ result) {
    throw $S00().Construct();
  };

  function Quaternion$b1_Multiply$14 (/* ref */ quaternion1, /* ref */ quaternion2, /* ref */ result) {
    throw $S00().Construct();
  };

  function Quaternion$b1_Negate$15 (quaternion) {
    throw $S00().Construct();
  };

  function Quaternion$b1_Negate$16 (/* ref */ quaternion, /* ref */ result) {
    throw $S00().Construct();
  };

  function Quaternion$b1_Normalize$17 () {
    throw $S00().Construct();
  };

  function Quaternion$b1_Normalize$18 (quaternion) {
    throw $S00().Construct();
  };

  function Quaternion$b1_Normalize$19 (/* ref */ quaternion, /* ref */ result) {
    throw $S00().Construct();
  };

  function Quaternion$b1_op_Addition (quaternion1, quaternion2) {
    throw $S00().Construct();
  };

  function Quaternion$b1_op_Division (quaternion1, quaternion2) {
    throw $S00().Construct();
  };

  function Quaternion$b1_op_Equality (quaternion1, quaternion2) {
    throw $S00().Construct();
  };

  function Quaternion$b1_op_Inequality (quaternion1, quaternion2) {
    throw $S00().Construct();
  };

  function Quaternion$b1_op_Multiply$1A (quaternion1, quaternion2) {
    throw $S00().Construct();
  };

  function Quaternion$b1_op_Multiply$1B (quaternion1, scaleFactor) {
    throw $S00().Construct();
  };

  function Quaternion$b1_op_Subtraction (quaternion1, quaternion2) {
    throw $S00().Construct();
  };

  function Quaternion$b1_op_UnaryNegation (quaternion) {
    throw $S00().Construct();
  };

  function Quaternion$b1_Slerp$1C (quaternion1, quaternion2, amount) {
    throw $S00().Construct();
  };

  function Quaternion$b1_Slerp$1D (/* ref */ quaternion1, /* ref */ quaternion2, amount, /* ref */ result) {
    throw $S00().Construct();
  };

  function Quaternion$b1_Subtract$1E (quaternion1, quaternion2) {
    throw $S00().Construct();
  };

  function Quaternion$b1_Subtract$1F (/* ref */ quaternion1, /* ref */ quaternion2, /* ref */ result) {
    throw $S00().Construct();
  };

  function Quaternion$b1_toString () {
    throw $S00().Construct();
  };

  JSIL.MakeType({
      BaseType: $asm0B.TypeRef("System.ValueType"), 
      Name: "WWUtils.Math.Quaternion`1", 
      IsPublic: true, 
      IsReferenceType: false, 
      GenericParameters: ["T"], 
      MaximumConstructorArguments: 4, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.GenericParameter("T"), $.GenericParameter("T"), 
          $.GenericParameter("T"), $.GenericParameter("T")
        ]), 
      Quaternion$b1__ctor$00
    );

    $.Method({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm0A.TypeRef("WWUtils.Math.Vector3`1", [$.GenericParameter("T")]), $.GenericParameter("T")]), 
      Quaternion$b1__ctor$01
    );

    $.Method({Static:true , Public:true }, "Add", 
      new JSIL.MethodSignature($asm0A.TypeRef("WWUtils.Math.Quaternion`1", [$.GenericParameter("T")]), [$asm0A.TypeRef("WWUtils.Math.Quaternion`1", [$.GenericParameter("T")]), $asm0A.TypeRef("WWUtils.Math.Quaternion`1", [$.GenericParameter("T")])]), 
      Quaternion$b1_Add$02
    );

    $.Method({Static:true , Public:true }, "Add", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("JSIL.Reference", [$asm0A.TypeRef("WWUtils.Math.Quaternion`1", [$.GenericParameter("T")])]), $jsilcore.TypeRef("JSIL.Reference", [$asm0A.TypeRef("WWUtils.Math.Quaternion`1", [$.GenericParameter("T")])]), 
          $jsilcore.TypeRef("JSIL.Reference", [$asm0A.TypeRef("WWUtils.Math.Quaternion`1", [$.GenericParameter("T")])])
        ]), 
      Quaternion$b1_Add$03
    );

    $.Method({Static:true , Public:true }, "CreateFromAxisAngle", 
      new JSIL.MethodSignature($asm0A.TypeRef("WWUtils.Math.Quaternion`1", [$.GenericParameter("T")]), [$asm0A.TypeRef("WWUtils.Math.Vector3`1", [$.GenericParameter("T")]), $.GenericParameter("T")]), 
      Quaternion$b1_CreateFromAxisAngle$04
    );

    $.Method({Static:true , Public:true }, "CreateFromAxisAngle", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("JSIL.Reference", [$asm0A.TypeRef("WWUtils.Math.Vector3`1", [$.GenericParameter("T")])]), $.GenericParameter("T"), 
          $jsilcore.TypeRef("JSIL.Reference", [$asm0A.TypeRef("WWUtils.Math.Quaternion`1", [$.GenericParameter("T")])])
        ]), 
      Quaternion$b1_CreateFromAxisAngle$05
    );

    $.Method({Static:true , Public:true }, "CreateFromRotationMatrix", 
      new JSIL.MethodSignature($asm0A.TypeRef("WWUtils.Math.Quaternion`1", [$.GenericParameter("T")]), [$asm0A.TypeRef("WWUtils.Math.Matrix`1", [$.GenericParameter("T")])]), 
      Quaternion$b1_CreateFromRotationMatrix$06
    );

    $.Method({Static:true , Public:true }, "CreateFromRotationMatrix", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("JSIL.Reference", [$asm0A.TypeRef("WWUtils.Math.Matrix`1", [$.GenericParameter("T")])]), $jsilcore.TypeRef("JSIL.Reference", [$asm0A.TypeRef("WWUtils.Math.Quaternion`1", [$.GenericParameter("T")])])]), 
      Quaternion$b1_CreateFromRotationMatrix$07
    );

    $.Method({Static:true , Public:true }, "Divide", 
      new JSIL.MethodSignature($asm0A.TypeRef("WWUtils.Math.Quaternion`1", [$.GenericParameter("T")]), [$asm0A.TypeRef("WWUtils.Math.Quaternion`1", [$.GenericParameter("T")]), $asm0A.TypeRef("WWUtils.Math.Quaternion`1", [$.GenericParameter("T")])]), 
      Quaternion$b1_Divide$08
    );

    $.Method({Static:true , Public:true }, "Divide", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("JSIL.Reference", [$asm0A.TypeRef("WWUtils.Math.Quaternion`1", [$.GenericParameter("T")])]), $jsilcore.TypeRef("JSIL.Reference", [$asm0A.TypeRef("WWUtils.Math.Quaternion`1", [$.GenericParameter("T")])]), 
          $jsilcore.TypeRef("JSIL.Reference", [$asm0A.TypeRef("WWUtils.Math.Quaternion`1", [$.GenericParameter("T")])])
        ]), 
      Quaternion$b1_Divide$09
    );

    $.Method({Static:true , Public:true }, "Dot", 
      new JSIL.MethodSignature($.GenericParameter("T"), [$asm0A.TypeRef("WWUtils.Math.Quaternion`1", [$.GenericParameter("T")]), $asm0A.TypeRef("WWUtils.Math.Quaternion`1", [$.GenericParameter("T")])]), 
      Quaternion$b1_Dot$0A
    );

    $.Method({Static:true , Public:true }, "Dot", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("JSIL.Reference", [$asm0A.TypeRef("WWUtils.Math.Quaternion`1", [$.GenericParameter("T")])]), $jsilcore.TypeRef("JSIL.Reference", [$asm0A.TypeRef("WWUtils.Math.Quaternion`1", [$.GenericParameter("T")])]), 
          $jsilcore.TypeRef("JSIL.Reference", [$.GenericParameter("T")])
        ]), 
      Quaternion$b1_Dot$0B
    );

    $.Method({Static:false, Public:true , Virtual:true }, "Object.Equals", 
      new JSIL.MethodSignature($.Boolean, [$.Object]), 
      Quaternion$b1_Object_Equals
    );

    $.Method({Static:false, Public:true , Virtual:true }, "Equals", 
      new JSIL.MethodSignature($.Boolean, [$asm0A.TypeRef("WWUtils.Math.Quaternion`1", [$.GenericParameter("T")])]), 
      Quaternion$b1_Equals$0C
    );

    $.Method({Static:true , Public:true }, "get_Identity", 
      new JSIL.MethodSignature($asm0A.TypeRef("WWUtils.Math.Quaternion`1", [$.GenericParameter("T")]), null), 
      Quaternion$b1_get_Identity
    );

    $.Method({Static:false, Public:true , Virtual:true }, "GetHashCode", 
      JSIL.MethodSignature.Return($.Int32), 
      Quaternion$b1_GetHashCode
    );

    $.Method({Static:true , Public:true }, "Inverse", 
      new JSIL.MethodSignature($asm0A.TypeRef("WWUtils.Math.Quaternion`1", [$.GenericParameter("T")]), [$asm0A.TypeRef("WWUtils.Math.Quaternion`1", [$.GenericParameter("T")])]), 
      Quaternion$b1_Inverse$0D
    );

    $.Method({Static:true , Public:true }, "Inverse", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("JSIL.Reference", [$asm0A.TypeRef("WWUtils.Math.Quaternion`1", [$.GenericParameter("T")])]), $jsilcore.TypeRef("JSIL.Reference", [$asm0A.TypeRef("WWUtils.Math.Quaternion`1", [$.GenericParameter("T")])])]), 
      Quaternion$b1_Inverse$0E
    );

    $.Method({Static:false, Public:true }, "Length", 
      new JSIL.MethodSignature($.GenericParameter("T"), null), 
      Quaternion$b1_Length
    );

    $.Method({Static:false, Public:true }, "LengthSquared", 
      new JSIL.MethodSignature($.GenericParameter("T"), null), 
      Quaternion$b1_LengthSquared
    );

    $.Method({Static:true , Public:true }, "Lerp", 
      new JSIL.MethodSignature($asm0A.TypeRef("WWUtils.Math.Quaternion`1", [$.GenericParameter("T")]), [
          $asm0A.TypeRef("WWUtils.Math.Quaternion`1", [$.GenericParameter("T")]), $asm0A.TypeRef("WWUtils.Math.Quaternion`1", [$.GenericParameter("T")]), 
          $.GenericParameter("T")
        ]), 
      Quaternion$b1_Lerp$0F
    );

    $.Method({Static:true , Public:true }, "Lerp", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("JSIL.Reference", [$asm0A.TypeRef("WWUtils.Math.Quaternion`1", [$.GenericParameter("T")])]), $jsilcore.TypeRef("JSIL.Reference", [$asm0A.TypeRef("WWUtils.Math.Quaternion`1", [$.GenericParameter("T")])]), 
          $.GenericParameter("T"), $jsilcore.TypeRef("JSIL.Reference", [$asm0A.TypeRef("WWUtils.Math.Quaternion`1", [$.GenericParameter("T")])])
        ]), 
      Quaternion$b1_Lerp$10
    );

    $.Method({Static:true , Public:true }, "Multiply", 
      new JSIL.MethodSignature($asm0A.TypeRef("WWUtils.Math.Quaternion`1", [$.GenericParameter("T")]), [$asm0A.TypeRef("WWUtils.Math.Quaternion`1", [$.GenericParameter("T")]), $asm0A.TypeRef("WWUtils.Math.Quaternion`1", [$.GenericParameter("T")])]), 
      Quaternion$b1_Multiply$11
    );

    $.Method({Static:true , Public:true }, "Multiply", 
      new JSIL.MethodSignature($asm0A.TypeRef("WWUtils.Math.Quaternion`1", [$.GenericParameter("T")]), [$asm0A.TypeRef("WWUtils.Math.Quaternion`1", [$.GenericParameter("T")]), $.GenericParameter("T")]), 
      Quaternion$b1_Multiply$12
    );

    $.Method({Static:true , Public:true }, "Multiply", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("JSIL.Reference", [$asm0A.TypeRef("WWUtils.Math.Quaternion`1", [$.GenericParameter("T")])]), $.GenericParameter("T"), 
          $jsilcore.TypeRef("JSIL.Reference", [$asm0A.TypeRef("WWUtils.Math.Quaternion`1", [$.GenericParameter("T")])])
        ]), 
      Quaternion$b1_Multiply$13
    );

    $.Method({Static:true , Public:true }, "Multiply", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("JSIL.Reference", [$asm0A.TypeRef("WWUtils.Math.Quaternion`1", [$.GenericParameter("T")])]), $jsilcore.TypeRef("JSIL.Reference", [$asm0A.TypeRef("WWUtils.Math.Quaternion`1", [$.GenericParameter("T")])]), 
          $jsilcore.TypeRef("JSIL.Reference", [$asm0A.TypeRef("WWUtils.Math.Quaternion`1", [$.GenericParameter("T")])])
        ]), 
      Quaternion$b1_Multiply$14
    );

    $.Method({Static:true , Public:true }, "Negate", 
      new JSIL.MethodSignature($asm0A.TypeRef("WWUtils.Math.Quaternion`1", [$.GenericParameter("T")]), [$asm0A.TypeRef("WWUtils.Math.Quaternion`1", [$.GenericParameter("T")])]), 
      Quaternion$b1_Negate$15
    );

    $.Method({Static:true , Public:true }, "Negate", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("JSIL.Reference", [$asm0A.TypeRef("WWUtils.Math.Quaternion`1", [$.GenericParameter("T")])]), $jsilcore.TypeRef("JSIL.Reference", [$asm0A.TypeRef("WWUtils.Math.Quaternion`1", [$.GenericParameter("T")])])]), 
      Quaternion$b1_Negate$16
    );

    $.Method({Static:false, Public:true }, "Normalize", 
      JSIL.MethodSignature.Void, 
      Quaternion$b1_Normalize$17
    );

    $.Method({Static:true , Public:true }, "Normalize", 
      new JSIL.MethodSignature($asm0A.TypeRef("WWUtils.Math.Quaternion`1", [$.GenericParameter("T")]), [$asm0A.TypeRef("WWUtils.Math.Quaternion`1", [$.GenericParameter("T")])]), 
      Quaternion$b1_Normalize$18
    );

    $.Method({Static:true , Public:true }, "Normalize", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("JSIL.Reference", [$asm0A.TypeRef("WWUtils.Math.Quaternion`1", [$.GenericParameter("T")])]), $jsilcore.TypeRef("JSIL.Reference", [$asm0A.TypeRef("WWUtils.Math.Quaternion`1", [$.GenericParameter("T")])])]), 
      Quaternion$b1_Normalize$19
    );

    $.Method({Static:true , Public:true }, "op_Addition", 
      new JSIL.MethodSignature($asm0A.TypeRef("WWUtils.Math.Quaternion`1", [$.GenericParameter("T")]), [$asm0A.TypeRef("WWUtils.Math.Quaternion`1", [$.GenericParameter("T")]), $asm0A.TypeRef("WWUtils.Math.Quaternion`1", [$.GenericParameter("T")])]), 
      Quaternion$b1_op_Addition
    );

    $.Method({Static:true , Public:true }, "op_Division", 
      new JSIL.MethodSignature($asm0A.TypeRef("WWUtils.Math.Quaternion`1", [$.GenericParameter("T")]), [$asm0A.TypeRef("WWUtils.Math.Quaternion`1", [$.GenericParameter("T")]), $asm0A.TypeRef("WWUtils.Math.Quaternion`1", [$.GenericParameter("T")])]), 
      Quaternion$b1_op_Division
    );

    $.Method({Static:true , Public:true }, "op_Equality", 
      new JSIL.MethodSignature($.Boolean, [$asm0A.TypeRef("WWUtils.Math.Quaternion`1", [$.GenericParameter("T")]), $asm0A.TypeRef("WWUtils.Math.Quaternion`1", [$.GenericParameter("T")])]), 
      Quaternion$b1_op_Equality
    );

    $.Method({Static:true , Public:true }, "op_Inequality", 
      new JSIL.MethodSignature($.Boolean, [$asm0A.TypeRef("WWUtils.Math.Quaternion`1", [$.GenericParameter("T")]), $asm0A.TypeRef("WWUtils.Math.Quaternion`1", [$.GenericParameter("T")])]), 
      Quaternion$b1_op_Inequality
    );

    $.Method({Static:true , Public:true }, "op_Multiply", 
      new JSIL.MethodSignature($asm0A.TypeRef("WWUtils.Math.Quaternion`1", [$.GenericParameter("T")]), [$asm0A.TypeRef("WWUtils.Math.Quaternion`1", [$.GenericParameter("T")]), $asm0A.TypeRef("WWUtils.Math.Quaternion`1", [$.GenericParameter("T")])]), 
      Quaternion$b1_op_Multiply$1A
    );

    $.Method({Static:true , Public:true }, "op_Multiply", 
      new JSIL.MethodSignature($asm0A.TypeRef("WWUtils.Math.Quaternion`1", [$.GenericParameter("T")]), [$asm0A.TypeRef("WWUtils.Math.Quaternion`1", [$.GenericParameter("T")]), $.GenericParameter("T")]), 
      Quaternion$b1_op_Multiply$1B
    );

    $.Method({Static:true , Public:true }, "op_Subtraction", 
      new JSIL.MethodSignature($asm0A.TypeRef("WWUtils.Math.Quaternion`1", [$.GenericParameter("T")]), [$asm0A.TypeRef("WWUtils.Math.Quaternion`1", [$.GenericParameter("T")]), $asm0A.TypeRef("WWUtils.Math.Quaternion`1", [$.GenericParameter("T")])]), 
      Quaternion$b1_op_Subtraction
    );

    $.Method({Static:true , Public:true }, "op_UnaryNegation", 
      new JSIL.MethodSignature($asm0A.TypeRef("WWUtils.Math.Quaternion`1", [$.GenericParameter("T")]), [$asm0A.TypeRef("WWUtils.Math.Quaternion`1", [$.GenericParameter("T")])]), 
      Quaternion$b1_op_UnaryNegation
    );

    $.Method({Static:true , Public:true }, "Slerp", 
      new JSIL.MethodSignature($asm0A.TypeRef("WWUtils.Math.Quaternion`1", [$.GenericParameter("T")]), [
          $asm0A.TypeRef("WWUtils.Math.Quaternion`1", [$.GenericParameter("T")]), $asm0A.TypeRef("WWUtils.Math.Quaternion`1", [$.GenericParameter("T")]), 
          $.GenericParameter("T")
        ]), 
      Quaternion$b1_Slerp$1C
    );

    $.Method({Static:true , Public:true }, "Slerp", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("JSIL.Reference", [$asm0A.TypeRef("WWUtils.Math.Quaternion`1", [$.GenericParameter("T")])]), $jsilcore.TypeRef("JSIL.Reference", [$asm0A.TypeRef("WWUtils.Math.Quaternion`1", [$.GenericParameter("T")])]), 
          $.GenericParameter("T"), $jsilcore.TypeRef("JSIL.Reference", [$asm0A.TypeRef("WWUtils.Math.Quaternion`1", [$.GenericParameter("T")])])
        ]), 
      Quaternion$b1_Slerp$1D
    );

    $.Method({Static:true , Public:true }, "Subtract", 
      new JSIL.MethodSignature($asm0A.TypeRef("WWUtils.Math.Quaternion`1", [$.GenericParameter("T")]), [$asm0A.TypeRef("WWUtils.Math.Quaternion`1", [$.GenericParameter("T")]), $asm0A.TypeRef("WWUtils.Math.Quaternion`1", [$.GenericParameter("T")])]), 
      Quaternion$b1_Subtract$1E
    );

    $.Method({Static:true , Public:true }, "Subtract", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("JSIL.Reference", [$asm0A.TypeRef("WWUtils.Math.Quaternion`1", [$.GenericParameter("T")])]), $jsilcore.TypeRef("JSIL.Reference", [$asm0A.TypeRef("WWUtils.Math.Quaternion`1", [$.GenericParameter("T")])]), 
          $jsilcore.TypeRef("JSIL.Reference", [$asm0A.TypeRef("WWUtils.Math.Quaternion`1", [$.GenericParameter("T")])])
        ]), 
      Quaternion$b1_Subtract$1F
    );

    $.Method({Static:false, Public:true , Virtual:true }, "toString", 
      JSIL.MethodSignature.Return($.String), 
      Quaternion$b1_toString
    );

    $.Field({Static:false, Public:true }, "X", $.GenericParameter("T")); 
    $.Field({Static:false, Public:true }, "Y", $.GenericParameter("T")); 
    $.Field({Static:false, Public:true }, "Z", $.GenericParameter("T")); 
    $.Field({Static:false, Public:true }, "W", $.GenericParameter("T")); 
    $.Field({Static:true , Public:false}, "identity", $asm0A.TypeRef("WWUtils.Math.Quaternion`1", [$.GenericParameter("T")])); 

    $.Method({Static:true , Public:false}, ".cctor", 
      JSIL.MethodSignature.Void, 
      JSIL.UntranslatableFunction("System.Void WWUtils.Math.Quaternion`1::.cctor()")
    );

    $.GenericProperty({Static:true , Public:true }, "Identity", $asm0A.TypeRef("WWUtils.Math.Quaternion`1", [$.GenericParameter("T")]));

    $.ImplementInterfaces(
      /* 0 */ $asm0B.TypeRef("System.IEquatable`1", [$asm0A.TypeRef("WWUtils.Math.Quaternion`1", [$.GenericParameter("T")])])
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

